<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nikki</name>
    </assembly>
    <members>
        <member name="T:Nikki.Core.GameINT">
            <summary>
            Contains game process enumeration.
            </summary>
        </member>
        <member name="F:Nikki.Core.GameINT.None">
            <summary>
            No supported game
            </summary>
        </member>
        <member name="F:Nikki.Core.GameINT.Carbon">
            <summary>
            Need for Speed: Carbon
            </summary>
        </member>
        <member name="F:Nikki.Core.GameINT.MostWanted">
            <summary>
            Need for Speed: Most Wanted 2005
            </summary>
        </member>
        <member name="F:Nikki.Core.GameINT.Underground2">
            <summary>
            Need for Speed: Underground 2
            </summary>
        </member>
        <member name="F:Nikki.Core.GameINT.Underground1">
            <summary>
            Need for Speed: Underground 1
            </summary>
        </member>
        <member name="F:Nikki.Core.GameINT.Prostreet">
            <summary>
            Need for Speed: Prostreet
            </summary>
        </member>
        <member name="T:Nikki.Core.Map">
            <summary>
            Represents all important maps of the library.
            </summary>
        </member>
        <member name="P:Nikki.Core.Map.BinKeys">
            <summary>
            Map of all Bin keys during runtime of library.
            </summary>
        </member>
        <member name="P:Nikki.Core.Map.VltKeys">
            <summary>
            Map of all Vlt keys during runtime of library.
            </summary>
        </member>
        <member name="P:Nikki.Core.Map.CarPartKeys">
            <summary>
            Map of all car part labels to <see cref="T:Nikki.Reflection.Enum.eCarPartAttribType"/>.
            </summary>
        </member>
        <member name="T:Nikki.Core.Settings">
            <summary>
            Static class with settings applied on runtime.
            </summary>
        </member>
        <member name="P:Nikki.Core.Settings.MessageShow">
            <summary>
            True if output messages to console; false if output to log file.
            </summary>
        </member>
        <member name="P:Nikki.Core.Settings.Watermark">
            <summary>
            Watermark that is written to saved files.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Abstract.ABasicBase">
            <summary>
            Very base class of any database.
            </summary>
        </member>
        <member name="P:Nikki.Reflection.Abstract.ABasicBase.Data_GlobalABUN">
            <summary>
            GlobalA file buffer.
            </summary>
        </member>
        <member name="P:Nikki.Reflection.Abstract.ABasicBase.Data_GlobalBLZC">
            <summary>
            GlobalB file buffer.
            </summary>
        </member>
        <member name="P:Nikki.Reflection.Abstract.ABasicBase.Data_LngGlobal">
            <summary>
            Language Text buffer.
            </summary>
        </member>
        <member name="P:Nikki.Reflection.Abstract.ABasicBase.Data_LngLabels">
            <summary>
            Language Label buffer.
            </summary>
        </member>
        <member name="P:Nikki.Reflection.Abstract.ABasicBase.GameINT">
            <summary>
            Game to which the class belongs to.
            </summary>
        </member>
        <member name="P:Nikki.Reflection.Abstract.ABasicBase.GameSTR">
            <summary>
            Game string to which the class belongs to.
            </summary>
        </member>
        <member name="M:Nikki.Reflection.Abstract.ABasicBase.GetCollection(System.String,System.String)">
            <summary>
            Gets a <see cref="T:Nikki.Reflection.Abstract.ACollectable"/> class from CollectionName and root provided.
            </summary>
            <param name="CName">CollectionName of <see cref="T:Nikki.Reflection.Abstract.ACollectable"/> to find.</param>
            <param name="root">Root collection of the class.</param>
            <returns><see cref="T:Nikki.Reflection.Abstract.ACollectable"/> class.</returns>
        </member>
        <member name="M:Nikki.Reflection.Abstract.ABasicBase.TryGetCollection(System.String,System.String,Nikki.Reflection.Abstract.ACollectable@)">
            <summary>
            Attempts to get <see cref="T:Nikki.Reflection.Abstract.ACollectable"/> class from CollectionName and root provided.
            </summary>
            <param name="CName">CollectionName of <see cref="T:Nikki.Reflection.Abstract.ACollectable"/> to find.</param>
            <param name="root">Root collection of the class.</param>
            <param name="collection"><see cref="T:Nikki.Reflection.Abstract.ACollectable"/> class that is to return.</param>
            <returns>True if collection exists and can be returned; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Reflection.Abstract.ABasicBase.GetPrimitive(System.String[])">
            <summary>
            Gets a <see cref="T:Nikki.Reflection.Interface.IReflective"/> class from the path provided.
            </summary>
            <param name="path">Path of the <see cref="T:Nikki.Reflection.Interface.IReflective"/> class to find.</param>
            <returns><see cref="T:Nikki.Reflection.Interface.IReflective"/> class.</returns>
        </member>
        <member name="M:Nikki.Reflection.Abstract.ABasicBase.TrySetStaticValue(System.String,System.String,System.String)">
            <summary>
            Attempts to set value statically in all collections in the root specified.
            </summary>
            <param name="root"></param>
            <param name="field"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nikki.Reflection.Abstract.ABasicBase.TrySetStaticValue(System.String,System.String,System.String,System.String@)">
            <summary>
            Attempts to set value statically in all collections in the root specified.
            </summary>
            <param name="root"></param>
            <param name="field"></param>
            <param name="value"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:Nikki.Reflection.Abstract.ABasicBase.TryAddCollection(System.String,System.String)">
            <summary>
            Attempts to add class specfified to the database.
            </summary>
            <param name="CName">Collection Name of the new class.</param>
            <param name="root">Root of the new class. Range: Materials, CarTypeInfos, PresetRides.</param>
            <returns>True if class adding was successful, false otherwise.</returns>
        </member>
        <member name="M:Nikki.Reflection.Abstract.ABasicBase.TryAddCollection(System.String,System.String,System.String@)">
            <summary>
            Attempts to add class specfified to the database.
            </summary>
            <param name="CName">Collection Name of the new class.</param>
            <param name="root">Root of the new class. Range: Materials, CarTypeInfos, PresetRides.</param>
            <param name="error">Error occured while trying to add class.</param>
            <returns>True if class adding was successful, false otherwise.</returns>
        </member>
        <member name="M:Nikki.Reflection.Abstract.ABasicBase.TryRemoveCollection(System.String,System.String)">
            <summary>
            Attempts to remove class specfified in the database.
            </summary>
            <param name="CName">Collection Name of the class to be deleted.</param>
            <param name="root">Root of the class to delete. Range: Materials, CarTypeInfos, PresetRides.</param>
            <returns>True if class removing was successful, false otherwise.</returns>
        </member>
        <member name="M:Nikki.Reflection.Abstract.ABasicBase.TryRemoveCollection(System.String,System.String,System.String@)">
            <summary>
            Attempts to remove class specfified in the database.
            </summary>
            <param name="CName">Collection Name of the class to be deleted.</param>
            <param name="root">Root of the class to delete. Range: Materials, CarTypeInfos, PresetRides.</param>
            <param name="error">Error occured while trying to remove class.</param>
            <returns>True if class removing was successful, false otherwise.</returns>
        </member>
        <member name="M:Nikki.Reflection.Abstract.ABasicBase.TryCloneCollection(System.String,System.String,System.String)">
            <summary>
            Attempts to clone class specfified in the database.
            </summary>
            <param name="newname">Collection Name of the new class.</param>
            <param name="copyfrom">Collection Name of the class to clone.</param>
            <param name="root">Root of the class to clone. Range: Materials, CarTypeInfos, PresetRides.</param>
            <returns>True if class cloning was successful, false otherwise.</returns>
        </member>
        <member name="M:Nikki.Reflection.Abstract.ABasicBase.TryCloneCollection(System.String,System.String,System.String,System.String@)">
            <summary>
            Attempts to clone class specfified in the database.
            </summary>
            <param name="newname">Collection Name of the new class.</param>
            <param name="copyfrom">Collection Name of the class to clone.</param>
            <param name="root">Root of the class to clone. Range: Materials, CarTypeInfos, PresetRides.</param>
            <param name="error">Error occured while trying to copy class.</param>
            <returns>True if class cloning was successful, false otherwise.</returns>
        </member>
        <member name="M:Nikki.Reflection.Abstract.ABasicBase.TryImportCollection(System.String,System.String)">
            <summary>
            Imports class data from a file specified.
            </summary>
            <param name="root">Class type to be imported. Range: Material, CarTypeInfo, PresetRide, PresetSkin.</param>
            <param name="filepath">File with data to be imported.</param>
            <returns>True if class import was successful, false otherwise.</returns>
        </member>
        <member name="M:Nikki.Reflection.Abstract.ABasicBase.TryImportCollection(System.String,System.String,System.String@)">
            <summary>
            Imports class data from a file specified.
            </summary>
            <param name="root">Class type to be imported. Range: Material, CarTypeInfo, PresetRide, PresetSkin.</param>
            <param name="filepath">File with data to be imported.</param>
            <param name="error">Error occured while trying to import class.</param>
            <returns>True if class import was successful, false otherwise.</returns>
        </member>
        <member name="M:Nikki.Reflection.Abstract.ABasicBase.TryExportCollection(System.String,System.String,System.String)">
            <summary>
            Exports <see cref="T:Nikki.Reflection.Abstract.ACollectable"/> data from <see cref="!:Root&lt;TypeID&gt;"/> 
            root to a file path specified.
            </summary>
            <param name="CName">CollectionName of <see cref="T:Nikki.Reflection.Abstract.ACollectable"/> class.</param>
            <param name="root">Name of the <see cref="!:Root&lt;TypeID&gt;"/> collection.</param>
            <param name="filepath">Filepath where data should be exported.</param>
            <returns>True if class export was successful, false otherwise.</returns>
        </member>
        <member name="M:Nikki.Reflection.Abstract.ABasicBase.TryExportCollection(System.String,System.String,System.String,System.String@)">
            <summary>
            Exports <see cref="T:Nikki.Reflection.Abstract.ACollectable"/> data from <see cref="!:Root&lt;TypeID&gt;"/> 
            root to a file path specified.
            </summary>
            <param name="CName">CollectionName of <see cref="T:Nikki.Reflection.Abstract.ACollectable"/> class.</param>
            <param name="root">Name of the <see cref="!:Root&lt;TypeID&gt;"/> collection.</param>
            <param name="filepath">Filepath where data should be exported.</param>
            <param name="error">Error occured while trying to export class.</param>
            <returns>True if class export was successful, false otherwise.</returns>
        </member>
        <member name="M:Nikki.Reflection.Abstract.ABasicBase.TryAddCollision(System.String,System.String,System.String@)">
            <summary>
            Adds collision block to the database memory.
            </summary>
            <param name="CName">Collection Name of the collision block.</param>
            <param name="filename">Filepath of the collision block to be imported.</param>
            <param name="error">Error occured when trying to add collision.</param>
            <returns>True if adding was successful; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Reflection.Abstract.ABasicBase.ExportTextures(System.String)">
            <summary>
            Exports all textures to the directory specified as .dds files.
            </summary>
            <param name="dir">Directory where all textures should be extracted.</param>
            <returns>True if export was successful.</returns>
        </member>
        <member name="M:Nikki.Reflection.Abstract.ABasicBase.ExportTextures(System.String,System.String)">
            <summary>
            Exports all textures to the directory specified.
            </summary>
            <param name="dir">Directory where all textures should be extracted.</param>
            <param name="mode">Mode of extraction. Range: ".dds", ".png", ".jpg", ".tiff", ".bmp".</param>
            <returns>True if export was successful.</returns>
        </member>
        <member name="M:Nikki.Reflection.Abstract.ABasicBase.GetDatabaseInfo">
            <summary>
            Gets information about <see cref="T:Nikki.Reflection.Abstract.ABasicBase"/> database.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nikki.Reflection.Abstract.ACollectable">
            <summary>
            <see cref="T:Nikki.Reflection.Abstract.ACollectable"/> class is a default collection of properties and fields of any 
            global type, which information can be accessed and modified through those properties. 
            It inherits from <see cref="T:Nikki.Reflection.Interface.IReflective"/> class and <see cref="T:Nikki.Reflection.Interface.ICastable`1"/> 
            interface and implements/overrides most of their methods.
            </summary>
        </member>
        <member name="P:Nikki.Reflection.Abstract.ACollectable.CollectionName">
            <summary>
            Collection name of the variable.
            </summary>
        </member>
        <member name="P:Nikki.Reflection.Abstract.ACollectable.Deletable">
            <summary>
            True if collection can be deleted from the database; false otherwise.
            </summary>
        </member>
        <member name="P:Nikki.Reflection.Abstract.ACollectable.GameINT">
            <summary>
            Game to which the class belongs to.
            </summary>
        </member>
        <member name="P:Nikki.Reflection.Abstract.ACollectable.GameSTR">
            <summary>
            Game string to which the class belongs to.
            </summary>
        </member>
        <member name="M:Nikki.Reflection.Abstract.ACollectable.GetAccessibles">
            <summary>
            Gets <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all properties with 
            <see cref="T:Nikki.Reflection.Attributes.AccessModifiableAttribute"/> attribute.
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of strings.</returns>
        </member>
        <member name="M:Nikki.Reflection.Abstract.ACollectable.GetSubPart(System.String,System.String)">
            <summary>
            Gets <see cref="T:Nikki.Reflection.Abstract.ASubPart"/> in the collection.
            </summary>
            <param name="name">Name of the <see cref="T:Nikki.Reflection.Abstract.ASubPart"/>.</param>
            <param name="node">Node to which subpart belongs to, mainly Name of 
            the <see cref="T:Nikki.Reflection.Attributes.ExpandableAttribute"/>.</param>
            <returns><see cref="T:Nikki.Reflection.Abstract.ASubPart"/> of the collection if exists; null otherwise.</returns>
        </member>
        <member name="M:Nikki.Reflection.Abstract.ACollectable.GetSubPart(System.String,System.String,Nikki.Reflection.Abstract.ASubPart@)">
            <summary>
            Attempts to get <see cref="T:Nikki.Reflection.Abstract.ASubPart"/> in the collection.
            </summary>
            <param name="name">Name of the <see cref="T:Nikki.Reflection.Abstract.ASubPart"/>.</param>
            <param name="node">Node to which subpart belongs to, mainly Name of
            the <see cref="T:Nikki.Reflection.Attributes.ExpandableAttribute"/>.</param>
            <param name="part"><see cref="T:Nikki.Reflection.Abstract.ASubPart"/> in case exists; null otherwise.</param>
            <returns>True if <see cref="T:Nikki.Reflection.Abstract.ASubPart"/> exists; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Reflection.Abstract.ACollectable.GetAllNodes">
            <summary>
            Gets all nodes and subnodes from the class.
            </summary>
            <returns>Array of virtual nodes that can be used to build treeview.</returns>
        </member>
        <member name="M:Nikki.Reflection.Abstract.ACollectable.ContainsAccessModifiable(System.String)">
            <summary>
            Checks if this class contains property with name specified that has AccessModifiable attribute.
            </summary>
            <param name="PropertyName">Name of the property to check.</param>
            <returns>True if property exists and has AccessModifiable attribute; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Reflection.Abstract.ACollectable.GetValue(System.String)">
            <summary>
            Returns the value of a field name provided.
            </summary>
            <param name="PropertyName">Field name to get the value from.</param>
            <returns>String value of a field name.</returns>
        </member>
        <member name="M:Nikki.Reflection.Abstract.ACollectable.SetValue(System.String,System.Object)">
            <summary>
            Sets value at a field specified.
            </summary>
            <param name="PropertyName">Name of the field to be modified.</param>
            <param name="value">Value to be set at the field specified.</param>
            <returns>True on success; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Reflection.Abstract.ACollectable.SetValue(System.String,System.Object,System.String@)">
            <summary>
            Sets value at a field specified.
            </summary>
            <param name="PropertyName">Name of the field to be modified.</param>
            <param name="value">Value to be set at the field specified.</param>
            <param name="error">Error occured when trying to set value.</param>
            <returns>True on success; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Reflection.Abstract.ACollectable.MemoryCast(System.String)">
            <summary>
            Casts all attributes from this object to another one.
            </summary>
            <param name="CName">CollectionName of the new created object.</param>
            <returns>Memory casted copy of the object.</returns>
        </member>
        <member name="T:Nikki.Reflection.Abstract.ASubPart">
            <summary>
            <see cref="T:Nikki.Reflection.Abstract.ASubPart"/> is a class that any <see cref="T:Nikki.Reflection.Abstract.ACollectable"/> may include in itself. 
            This class is not allowed to have any <see cref="T:Nikki.Reflection.Attributes.AccessModifiableAttribute"/> 
            because all properties should be public, accessible and modifiable from the outside.
            </summary>
        </member>
        <member name="P:Nikki.Reflection.Abstract.ASubPart.Parent">
            <summary>
            Optionable <see cref="T:Nikki.Reflection.Abstract.ACollectable"/> parent of this <see cref="T:Nikki.Reflection.Abstract.ASubPart"/> class.
            </summary>
        </member>
        <member name="M:Nikki.Reflection.Abstract.ASubPart.GetAccessibles">
            <summary>
            Gets <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all properties with 
            <see cref="T:Nikki.Reflection.Attributes.AccessModifiableAttribute"/> attribute.
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of strings.</returns>
        </member>
        <member name="M:Nikki.Reflection.Abstract.ASubPart.GetValue(System.String)">
            <summary>
            Returns the value of a field name provided.
            </summary>
            <param name="PropertyName">Field name to get the value from.</param>
            <returns>String value of a field name.</returns>
        </member>
        <member name="M:Nikki.Reflection.Abstract.ASubPart.SetValue(System.String,System.Object)">
            <summary>
            Sets value at a field specified.
            </summary>
            <param name="PropertyName">Name of the field to be modified.</param>
            <param name="value">Value to be set at the field specified.</param>
            <returns>True on success; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Reflection.Abstract.ASubPart.SetValue(System.String,System.Object,System.String@)">
            <summary>
            Sets value at a field specified.
            </summary>
            <param name="PropertyName">Name of the field to be modified.</param>
            <param name="value">Value to be set at the field specified.</param>
            <param name="error">Error occured when trying to set value.</param>
            <returns>True on success; false otherwise.</returns>
        </member>
        <member name="T:Nikki.Reflection.Abstract.VirtualNode">
            <summary>
            Node that can be used for representing virtual hierarchy of collections in the database.
            </summary>
        </member>
        <member name="P:Nikki.Reflection.Abstract.VirtualNode.NodeName">
            <summary>
            Name of the <see cref="T:Nikki.Reflection.Abstract.VirtualNode"/> class.
            </summary>
        </member>
        <member name="P:Nikki.Reflection.Abstract.VirtualNode.SubNodes">
            <summary>
            List of child <see cref="T:Nikki.Reflection.Abstract.VirtualNode"/> classes.
            </summary>
        </member>
        <member name="M:Nikki.Reflection.Abstract.VirtualNode.#ctor(System.String)">
            <summary>
            Default constructor: initializes instance of <see cref="T:Nikki.Reflection.Abstract.VirtualNode"/> class.
            </summary>
            <param name="NodeName">Name of the <see cref="P:Nikki.Reflection.Abstract.VirtualNode.NodeName"/> property of 
            <see cref="T:Nikki.Reflection.Abstract.VirtualNode"/> class.</param>
        </member>
        <member name="M:Nikki.Reflection.Abstract.VirtualNode.ToString">
            <summary>
            Gets NodeName and SubNodes count as a string value.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="T:Nikki.Reflection.Attributes.AccessModifiableAttribute">
            <summary>
            Indicates that the field or property can be accessed and modified by user.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Attributes.ExpandableAttribute">
            <summary>
            Indicates that the property is an expandable class of a node.
            </summary>
        </member>
        <member name="P:Nikki.Reflection.Attributes.ExpandableAttribute.Name">
            <summary>
            Parent of the property and/or node.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Attributes.LabelAttribute">
            <summary>
            Indicates what the property/field is used for and its optional boundaries.
            </summary>
        </member>
        <member name="P:Nikki.Reflection.Attributes.LabelAttribute.Label">
            <summary>
            Parent of the property and/or node.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Attributes.StaticModifiableAttribute">
            <summary>
            Indicates that the field or property can be statically modified through collections.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.BaseArguments">
            <summary>
            Class of all base and common arguments.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.BaseArguments.NULL">
            <summary>
            NULL as a string.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.BaseArguments.AUTO">
            <summary>
            AUTO as a string.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.BaseArguments.TRUE">
            <summary>
            True as a string.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.BaseArguments.FALSE">
            <summary>
            False as a string.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.BaseArguments.DEFAULT">
            <summary>
            DEFAULT as a string.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.BaseArguments.RANDOM">
            <summary>
            RANDOM as a string.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.BaseArguments.MAIN">
            <summary>
            MAIN as a string.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.BaseArguments.GLOBAL">
            <summary>
            GLOBAL as a string.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.BaseArguments.STOCK">
            <summary>
            STOCK as a string.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.BaseArguments.WHITE">
            <summary>
            WHITE as a string.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.BaseArguments.PPAINT">
            <summary>
            GLOSS as a string.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.BaseArguments.BPAINT">
            <summary>
            GLOSS_L1_COLOR17 as a string.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.BaseArguments.UGPAINT">
            <summary>
            GLOSS_L1_COLOR01 as a string.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.BaseArguments.CPPAINT">
            <summary>
            CALIPERS_L1_COLOR01 as a string.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.BaseArguments.RMPAINT">
            <summary>
            RIMS_L1_COLOR01 as a string.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.BaseArguments.VLPAINT">
            <summary>
            VINYL_L1_COLOR01 as a string.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eAlphaUsageType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eAlphaUsageType.TEXUSAGE_NONE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eAlphaUsageType.TEXUSAGE_PUNCHTHRU">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eAlphaUsageType.TEXUSAGE_MODULATED">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eBoolean">
            <summary>
            Enum with values False (representing boolean false) and True (representing boolean true).
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eBoolean.False">
            <summary>
            Represents <see langword="false"/>
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eBoolean.True">
            <summary>
            Represents <see langword="true"/>
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eBoundValues">
            <summary>
            Enum of default numbers of cars in games.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eBoundValues.MIN_INFO_UNDERGROUND2">
            <summary>
            Amount of cars in default Underground 2.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eBoundValues.MIN_INFO_MOSTWANTED">
            <summary>
            Amount of cars in default Most Wanted.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eBoundValues.MIN_INFO_CARBON">
            <summary>
            Amount of cars in default Carbon.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eCameraType">
            <summary>
            Enum of camera types.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCameraType.FAR">
            <summary>
            Far camera.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCameraType.CLOSE">
            <summary>
            Close camera.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCameraType.BUMPER">
            <summary>
            Bumper camera.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCameraType.DRIVER">
            <summary>
            Driver camera.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCameraType.HOOD">
            <summary>
            Hood camera.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCameraType.DRIFT">
            <summary>
            Drift camera.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eCarbonPaint">
            <summary>
            Enum of default paints in Carbon.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarbonPaint.GLOSS">
            <summary>
            Gloss paint.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarbonPaint.METALLIC">
            <summary>
            Metallic paint.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarbonPaint.CHROME">
            <summary>
            Chrome paint.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarbonPaint.CANDY">
            <summary>
            Candy paint.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarbonPaint.PEARL">
            <summary>
            Pearl paint.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarbonPaint.MATTE">
            <summary>
            Matte paint.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarbonPaint.IRIDESCENT">
            <summary>
            Iridescent paint.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eCarPartAttribType">
            <summary>
            Enum of car part attribute types.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartAttribType.Boolean">
            <summary>
            Attribute with a <see langword="bool"/> stored.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartAttribType.Integer">
            <summary>
            Attribute with an <see langword="int"/> stored.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartAttribType.Floating">
            <summary>
            Attribute with a <see langword="float"/> stored.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartAttribType.String">
            <summary>
            Attribute with a <see langword="string"/> stored.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartAttribType.TwoString">
            <summary>
            Attribute with two <see langword="string"/> stored.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartAttribType.CarPartID">
            <summary>
            Attribute with CarPartID.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eCarPartLabels">
            <summary>
            Enum of all car part labels.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels._0x04B39858">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels._0x10C98090">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels._0x1B0EA1A9">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels._0x5412A1D9">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels._0x6509EC92">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels._0x65F58556">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels._0x6BA02C05">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels._0x87557E1E">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels._0xB5548ED7">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels._0xCE7D8DB5">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels._0xD68A7BAB">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels._0xE80A3B62">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels._0xEB0101E2">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels._0xEBB03E66">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.ALPHA">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.ALPHA2">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.ANIMSTYLE">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.BLEND">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.BLUE">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.BLUE2">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.CARBONFIBRE">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.CENTER">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.COLOR0ID">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.COLOR1ID">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.COLOR2ID">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.COLOR3ID">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.CV">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.DAMAGELEVEL">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.DISPBLUE">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.DISPGREEN">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.DISPRED">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.EXCLUDE_SUV">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.EXCLUDE_UG1">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.EXCLUDE_UG2">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.FULLBODY">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.GLOSS">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.GREEN">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.GREEN2">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.GROUPLANGUAGEHASH">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.HOODEMITTER">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.HOODHUE">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.HOODLEFT">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.HOODLUM">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.HOODRIGHT">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.HOODSAT">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.HOODUNDER">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.HUDINDEX">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.KITNUMBER">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.LANGUAGEHASH">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.LOD_BASE_NAME">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.LOD_CHARACTERS_OFFSET">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.LOD_NAME_PREFIX_NAMEHASH">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.LOD_NAME_PREFIX_SELECTOR">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.MAT0">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.MAT1">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.MAT2">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.MAT3">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.MAT4">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.MAT5">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.MAT6">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.MAT7">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.MATNAMEA">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.MATNAMEB">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.MAX_LOD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.MIRROR">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.MODEL_TABLE_OFFSET">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.MORPHTARGET_NUM">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.NAME">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.NAME_OFFSET">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.NUM_DECALS">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.NUMCOLOURS">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.NUMREMAPCOLOURS">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.ONLINE">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.PAINTGROUP">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.PART_NAME_BASE_HASH">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.PART_NAME_OFFSETS">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.PART_NAME_SELECTOR">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.PARTID_UPGRADE_GROUP">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.RED">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.RED2">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.REMAP">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.SHAPE">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.SIZE">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.SPECIFICCARNAME">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.SPINNER_TEXTURE">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.SPINNEROFFSET">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.STOCK">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.STOCK_MATERIAL">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.SWATCH">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.TEXTURE">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.TIREHUE">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.TIRELUM">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.TIRESAT">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.USEMARKER1">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.USEMARKER2">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.VERTSPLIT">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.VINYLLANGUAGEHASH">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.WHEELEMITTER">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.WHEELLEFT">
             <summary>
            
             </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarPartLabels.WHEELRIGHT">
             <summary>
            
             </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eCarSkinClass">
            <summary>
            Enum of CarSkin types in Underground 2.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarSkinClass.Racing">
            <summary>
            Racing CarSkin.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eCarSkinClass.Traffic">
            <summary>
            Traffic CarSkin.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eDecalType">
            <summary>
            Enum of applied decal types.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eDecalType.NONE">
            <summary>
            No decals.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eDecalType.MEDIUM">
            <summary>
            Medium decals.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eDecalType.SMALL">
            <summary>
            Small decals.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eDriftType">
            <summary>
            Enum of drift event types in Underground 2.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eDriftType.VS_AI">
            <summary>
            Drift versus AI.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eDriftType.DOWNHILL">
            <summary>
            Drift downhill.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eDriftType.TEAM">
            <summary>
            Team-based drift.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eEventBehaviorType">
            <summary>
            Enum of event behavior types in Underground 2.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eEventBehaviorType.Circuit">
            <summary>
            Circuit event.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eEventBehaviorType.Sprint">
            <summary>
            Sprint event.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eEventBehaviorType.StreetX">
            <summary>
            StreetX event.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eEventBehaviorType.OpenWorld">
            <summary>
            OpenWorld (FreeRoam) event.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eEventBehaviorType.Drag">
            <summary>
            Drag event.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eEventBehaviorType.Drift">
            <summary>
            Drift event.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eEventIconType">
            <summary>
            Enum of event icon types for Underground 2.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eEventIconType.NONE">
            <summary>
            No icon.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eEventIconType.SPONSOR">
            <summary>
            Sponsor icon.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eEventIconType.URL">
            <summary>
            URL icon.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eEventIconType.REGULAR">
            <summary>
            Regular icon.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eKeyType">
            <summary>
            Type of the key/hash.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eKeyType.DEFAULT">
            <summary>
            Default system HashCode.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eKeyType.BINKEY">
            <summary>
            BinHash key.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eKeyType.VLTKEY">
            <summary>
            VltHash key.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eKeyType.CUSTOM">
            <summary>
            Custom key.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eLocationType">
            <summary>
            Enum of location types in Underground 2.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eLocationType.UPPER_CLASS">
            <summary>
            Beacon Hill.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eLocationType.CITY_CORE">
            <summary>
            City Core.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eLocationType.SUBURBAN_HILLS">
            <summary>
            Jackson Heights.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eLocationType.INDUSTRIAL_PARK">
            <summary>
            Coal Harbor.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eLocationType.AIRPORT">
            <summary>
            Airport.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eLocationType.MODE_SPECIFIC">
            <summary>
            Debug.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eMemoryType">
            <summary>
            Enum of car memory types.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eMemoryType.Player">
            <summary>
            Player Memory Type.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eMemoryType.Racing">
            <summary>
            Racing Memory Type.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eMemoryType.Cop">
            <summary>
            Cop Memory Type.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eMemoryType.Traffic">
            <summary>
            Traffic Memory Type.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eMemoryType.BigTraffic">
            <summary>
            BigTraffic Memory Type.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eMemoryType.HugeTraffic">
            <summary>
            HugeTraffic Memory Type.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eMirrorTypes">
            <summary>
            Enum of all mirror types in Underground 2.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eMirrorTypes.MIRRORS">
            <summary>
            Regular mirrors.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eMirrorTypes.MIRRORS_BODY">
            <summary>
            Mirrors for cars with wide body.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eMirrorTypes.MIRRORS_POST">
            <summary>
            Special mirrors.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eMirrorTypes.MIRRORS_SUV">
            <summary>
            Murrors for SUV cars.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eMirrorTypes.MIRRORS_HUMMER">
            <summary>
            Mirrors for hummer cars.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eMirrorTypes.MIRRORS_NONE">
            <summary>
            No mirrors.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.ePartUnlockReq">
            <summary>
            Enum of part unlock requirements in Underground 2.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.ePartUnlockReq.NO_REQUIREMENTS">
            <summary>
            No requirements.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.ePartUnlockReq.SPECIFIC_SHOP_FOUND">
            <summary>
            Need to find specific shop.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.ePartUnlockReq.REQUIRED_REG_RACES_WON">
            <summary>
            Need to win specific amount of Regular races.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.ePartUnlockReq.REQUIRED_URL_RACES_WON">
            <summary>
            Need to win specific amount of URL races.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.ePartUnlockReq.REQUIRED_SPON_RACES_WON">
            <summary>
            Need to win specific amount of Sponsor races.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.ePartUnlockReq.INITIALLY_UNLOCKED">
            <summary>
            Initially unlocked.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.ePerformanceType">
            <summary>
            Enum of performance types in Underground 2.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.ePerformanceType.WEIGHT_REDUCTION">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.ePerformanceType.DRIVETRAIN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.ePerformanceType.NOS">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.ePerformanceType.ENGINE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.ePerformanceType.TURBO">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.ePerformanceType.SUSPENSION">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.ePerformanceType.BRAKES">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.ePerformanceType.ECU">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.ePerformanceType.TIRES">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.ePerformanceType.AERO">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eRaceGameplayMode">
            <summary>
            Enum of all gameplay modes in Underground 2.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eRaceGameplayMode.NONE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eRaceGameplayMode.DRAG">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eRaceGameplayMode.DRIFT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eRaceGameplayMode.DRAGDRIFT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eRaceGameplayMode.OPENWORLD">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eRaceGameplayMode.SPRINT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eRaceGameplayMode.DRAGSPRINT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eRaceGameplayMode.OUTRUN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eRaceGameplayMode.CIRCUIT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eRaceGameplayMode.STREETX">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eRaceGameplayMode.DRIFTSTREETX">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eRaceGameplayMode.URL">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eRaceGameplayMode.DRIFTURL">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eSpoiler">
            <summary>
            Enum of possible spoiler types.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSpoiler.SPOILER">
            <summary>
            Regular spoilers.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSpoiler.SPOILER_HATCH">
            <summary>
            Spoilers for hatchbacks.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSpoiler.SPOILER_PORSCHES">
            <summary>
            Spoilers for cars with porsche-like trunks.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSpoiler.SPOILER_CARRERA">
            <summary>
            Spoilers for cars with wide trunks.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSpoiler.SPOILER_SUV">
            <summary>
            Spoilers for SUV cars.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSpoiler.SPOILER_NONE">
            <summary>
            No spoilers.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eSpoilerAS2">
            <summary>
            Enum of possible autosculpt spoiler types.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSpoilerAS2.SPOILER_AS2">
            <summary>
            Regular autosculpt spoilers.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSpoilerAS2.SPOILER_HATCH_AS2">
            <summary>
            Autosculpt spoilers for hatchbacks.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSpoilerAS2.SPOILER_PORSCHES_AS2">
            <summary>
            Autosculpt spoilers for cars with porsche-like trunks.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSpoilerAS2.SPOILER_CARRERA_AS2">
            <summary>
            Autosculpt spoilers for cars with wide trunks.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSpoilerAS2.SPOILER_SUV_AS2">
            <summary>
            Autosculpt spoilers for SUV cars.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSpoilerAS2.SPOILER_NONE_AS2">
            <summary>
            No autosculpt spoilers.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eSponsorRaceType">
            <summary>
            Enum of sponsor race types in Underground 2.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSponsorRaceType.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSponsorRaceType.Circuit">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSponsorRaceType.Drift">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSponsorRaceType.Drag">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSponsorRaceType.Sprint">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSponsorRaceType.StreetX">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eSTypes">
            <summary>
            Enum of possible spoilers for preset rides.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSTypes.NULL">
            <summary>
            Nullified spoiler.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSTypes.STOCK">
            <summary>
            Stock spoiler.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSTypes.BASE">
            <summary>
            Regular spoiler.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSTypes._HATCH">
            <summary>
            Hatchback-type spoiler.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSTypes._PORSCHES">
            <summary>
            Porsche-type spoiler.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSTypes._CARRERA">
            <summary>
            Carrera-type spoiler.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSTypes._SUV">
            <summary>
            SUV-type spoiler.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eSunAlpha">
            <summary>
            Enum of sun alpha values.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSunAlpha.SUNALPHA_BLEND">
            <summary>
            Blenging rays.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSunAlpha.SUNALPHA_ADD">
            <summary>
            Additive rays.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eSunTexture">
            <summary>
            Enum of sun textures that could be used.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSunTexture.SUNTEX_CENTER">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSunTexture.SUNTEX_HALO">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSunTexture.SUNTEX_MAJORRAYS">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSunTexture.SUNTEX_MINORRAYS">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSunTexture.SUNTEX_RING">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eSunTexture.NUM_SUN_TEXTURES">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eTakePhotoMethod">
            <summary>
            Enum of taking photo methods in Underground 2.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTakePhotoMethod.MAGAZINE_YOURSELF">
            <summary>
            Take photo by yourself for magazine.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTakePhotoMethod.DVD_YOURSELF">
            <summary>
            Take photo by yourself for dvd.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTakePhotoMethod.MAGAZINE_AUTO">
            <summary>
            Take photo in-place for magazine.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTakePhotoMethod.DVD_AUTO">
            <summary>
            Take photo in-place for dvd.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eTextureAlphaBlendType">
            <summary>
            Enum of alpha blend types for textures.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureAlphaBlendType.TEXBLEND_DEFAULT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureAlphaBlendType.TEXBLEND_SRCCOPY">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureAlphaBlendType.TEXBLEND_BLEND">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureAlphaBlendType.TEXBLEND_ADDATIVE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureAlphaBlendType.TEXBLEND_SUBTRACTIVE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureAlphaBlendType.TEXBLEND_OVERBRIGHT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureAlphaBlendType.TEXBLEND_DEST_BLEND">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureAlphaBlendType.TEXBLEND_DEST_ADDATIVE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureAlphaBlendType.TEXBLEND_DEST_SUBTRACTIVE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureAlphaBlendType.TEXBLEND_DEST_OVERBRIGHT">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eTextureCompressionType">
            <summary>
            Enum of all compression types used in TPK.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureCompressionType.TEXCOMP_DEFAULT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureCompressionType.TEXCOMP_4BIT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureCompressionType.TEXCOMP_8BIT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureCompressionType.TEXCOMP_16BIT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureCompressionType.TEXCOMP_16BIT_1555">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureCompressionType.TEXCOMP_16BIT_565">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureCompressionType.TEXCOMP_16BIT_3555">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureCompressionType.TEXCOMP_24BIT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureCompressionType.TEXCOMP_32BIT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureCompressionType.TEXCOMP_DXT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureCompressionType.TEXCOMP_S3TC">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureCompressionType.TEXCOMP_DXTC1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureCompressionType.TEXCOMP_DXTC3">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureCompressionType.TEXCOMP_DXTC5">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureCompressionType.TEXCOMP_DXTN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureCompressionType.TEXCOMP_L8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureCompressionType.TEXCOMP_DXTC1_AIR">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureCompressionType.TEXCOMP_DXTC1_AIG">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureCompressionType.TEXCOMP_DXTC1_AIB">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureCompressionType.TEXCOMP_8BIT_16">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureCompressionType.TEXCOMP_8BIT_64">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureCompressionType.TEXCOMP_8BIT_IA8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureCompressionType.TEXCOMP_4BIT_IA8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureCompressionType.TEXCOMP_4BIT_RGB24_A8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureCompressionType.TEXCOMP_8BIT_RGB24_A8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureCompressionType.TEXCOMP_4BIT_RGB16_A8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureCompressionType.TEXCOMP_8BIT_RGB16_A8">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eTextureMipmapBiasType">
            <summary>
            Enum of possible mipmap bias types.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureMipmapBiasType.TEXBIAS_DEFAULT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureMipmapBiasType.TEXBIAS_ADS">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureMipmapBiasType.TEXBIAS_ARC">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureMipmapBiasType.TEXBIAS_OBJ">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureMipmapBiasType.TEXBIAS_ORG">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureMipmapBiasType.TEXBIAS_SGN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureMipmapBiasType.TEXBIAS_TRN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureMipmapBiasType.TEXBIAS_PARTICLES">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureMipmapBiasType.TEXBIAS_NUM">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eTextureScrollType">
            <summary>
            Enum of texture scroll types.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureScrollType.TEXSCROLL_NONE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureScrollType.TEXSCROLL_SMOOTH">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureScrollType.TEXSCROLL_SNAP">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTextureScrollType.TEXSCROLL_OFFSETSCALE">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eTPKVersion">
            <summary>
            Enum of <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/> version types.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTPKVersion.Underground1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTPKVersion.Underground2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTPKVersion.MostWanted">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTPKVersion.Carbon">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTPKVersion.Prostreet">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTPKVersion.Undercover">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eTrackDifficulty">
            <summary>
            Enum of track difficulties in Underground 2.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTrackDifficulty.TRACK_DIFFICULTY_EASY">
            <summary>
            Easy difficulty.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTrackDifficulty.TRACK_DIFFICULTY_MEDIUM">
            <summary>
            Medium difficulty.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eTrackDifficulty.TRACK_DIFFICULTY_HARD">
            <summary>
            Hard difficulty.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eUnlockCondition">
            <summary>
            Enum of event unlock conditions in Underground 2.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eUnlockCondition.SPECIFIC_RACE_WON">
            <summary>
            Event requires specific race won.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eUnlockCondition.AT_STAGE_START">
            <summary>
            Event unlocks at the beginning of the stage to which it belongs to.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eUnlockCondition.SPONSOR_CHOSEN">
            <summary>
            Event requires specific sponsor chosen.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eUnlockCondition.REQUIRED_RACES_WON">
            <summary>
            Event requires specific amount of races won.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eUnlockCondition.REQUIRED_URL_WON">
            <summary>
            Event requires specific amount of URL won.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eUsageType">
            <summary>
            Enum of usage types.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eUsageType.Racer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eUsageType.Cop">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eUsageType.Traffic">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eUsageType.Wheels">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eUsageType.Universal">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eWideDecalType">
            <summary>
            Enum of wide decal types.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eWideDecalType.NONE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eWideDecalType.WIDE1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eWideDecalType.WIDE2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eWideDecalType.WIDE3">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eWideDecalType.WIDE4">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eWorldChallengeType">
            <summary>
            Enum of world challenge types in Underground 2.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eWorldChallengeType.Visual">
            <summary>
            Unlocks visual upgrade.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eWorldChallengeType.Performance">
            <summary>
            Unlocks performance upgrade.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eWorldChallengeType.Showcase">
            <summary>
            Is a showcase event.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Enum.eWorldShopType">
            <summary>
            Enum of world shop types in Underground 2.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eWorldShopType.CRIB_GARAGE">
            <summary>
            Garage.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eWorldShopType.PAINTSHOP">
            <summary>
            Paint shop.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eWorldShopType.PARTSSHOP">
            <summary>
            Parts shop.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eWorldShopType.PERFSHOP">
            <summary>
            Performance shop.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eWorldShopType.CARLOT">
            <summary>
            Car lot.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eWorldShopType.AUDIOSHOP">
            <summary>
            Specialties shop.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.Enum.eWorldShopType.UNIQUE">
            <summary>
            Uniques shop.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Exception.ArgumentLengthException">
            <summary>
            <see cref="T:System.Exception"/> that occurs when argument length 
            exceed maximum allowed value.
            </summary>
        </member>
        <member name="M:Nikki.Reflection.Exception.ArgumentLengthException.#ctor">
            <summary>
            Initializes new instance of <see cref="T:Nikki.Reflection.Exception.ArgumentLengthException"/> 
            with default message.
            </summary>
        </member>
        <member name="M:Nikki.Reflection.Exception.ArgumentLengthException.#ctor(System.String)">
            <summary>
            Initializes new instance of <see cref="T:Nikki.Reflection.Exception.ArgumentLengthException"/> 
            with custom message passed.
            </summary>
            <param name="message">Custom message.</param>
        </member>
        <member name="M:Nikki.Reflection.Exception.ArgumentLengthException.#ctor(System.Int32)">
            <summary>
            Initializes new instance of <see cref="T:Nikki.Reflection.Exception.ArgumentLengthException"/> 
            with default message specifying maximum length allowed.
            </summary>
            <param name="maxlength">Maximum length allowed.</param>
        </member>
        <member name="T:Nikki.Reflection.Exception.CollectionExistenceException">
            <summary>
            <see cref="T:System.Exception"/> that occurs when collection with CollectionName  
            provided already exists in the database.
            </summary>
        </member>
        <member name="M:Nikki.Reflection.Exception.CollectionExistenceException.#ctor">
            <summary>
            Initializes new instance of <see cref="T:Nikki.Reflection.Exception.CollectionExistenceException"/> 
            with default message.
            </summary>
        </member>
        <member name="M:Nikki.Reflection.Exception.CollectionExistenceException.#ctor(System.String)">
            <summary>
            Initializes new instance of <see cref="T:Nikki.Reflection.Exception.CollectionExistenceException"/> 
            with custom message passed.
            </summary>
            <param name="message">Custom message.</param>
        </member>
        <member name="T:Nikki.Reflection.Exception.MappingFailException">
            <summary>
            <see cref="T:System.Exception"/> that occurs when key or hash were unable to be resolved.
            </summary>
        </member>
        <member name="M:Nikki.Reflection.Exception.MappingFailException.#ctor">
            <summary>
            Initializes new instance of <see cref="T:Nikki.Reflection.Exception.ArgumentLengthException"/> 
            with default message.
            </summary>
        </member>
        <member name="M:Nikki.Reflection.Exception.MappingFailException.#ctor(System.String)">
            <summary>
            Initializes new instance of <see cref="T:Nikki.Reflection.Exception.ArgumentLengthException"/> 
            with custom message passed.
            </summary>
            <param name="message">Custom message.</param>
        </member>
        <member name="T:Nikki.Reflection.ID.CareerInfo">
            <summary>
            Class of IDs related to Underground 2 GCareer.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.CareerInfo.MAINID">
            <summary>
            Main ID
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.CareerInfo.STRING_BLOCK">
            <summary>
            ID of the string block of GCareer.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.CareerInfo.EVENT_BLOCK">
            <summary>
            ID of the event block of GCareer.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.CareerInfo.SHOP_BLOCK">
            <summary>
            ID of the shop block of GCareer.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.CareerInfo.BRAND_BLOCK">
            <summary>
            ID of the brand block of GCareer.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.CareerInfo.PERF_PACK_BLOCK">
            <summary>
            ID of the performance packs of GCareer.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.CareerInfo.SHOWCASE_BLOCK">
            <summary>
            ID of the showcase block of GCareer.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.CareerInfo.SMS_MESSAGE_BLOCK">
            <summary>
            ID of the sms message block of GCareer.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.CareerInfo.STAGE_BLOCK">
            <summary>
            ID of the stage block of GCareer.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.CareerInfo.SPONSOR_BLOCK">
            <summary>
            ID of the sponsor block of GCareer.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.CareerInfo.TUNING_PERF_BLOCK">
            <summary>
            ID of the performance tuning block of GCareer.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.CareerInfo.WORLD_CHAL_BLOCK">
            <summary>
            ID of the world challenges block of GCareer.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.CareerInfo.PART_UNLOCKS_BLOCK">
            <summary>
            ID of part unlocks block of GCareer.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.CareerInfo.BANK_TRIGS_BLOCK">
            <summary>
            ID of bank triggers of GCareer.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.CareerInfo.CAR_UNLOCKS_BLOCK">
            <summary>
            ID of car unlocks block of GCareer.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.ID.CarParts">
            <summary>
            Class of IDs related to CarPart database.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.CarParts.CollisionBound">
            <summary>
            ID of a unit collision bound.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.CarParts.MAINID">
            <summary>
            
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.CarParts.DBCARPART_HEADER">
            <summary>
            ID of the header of CarPart database.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.CarParts.DBCARPART_ARRAY">
            <summary>
            ID of the main array of carparts of CarPart database.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.CarParts.DBCARPART_ATTRIBS">
            <summary>
            ID of the attributes table of CarPart database.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.CarParts.DBCARPART_STRINGS">
            <summary>
            ID of the strings block of CarPart database.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.CarParts.DBCARPART_STRUCTS">
            <summary>
            ID of the model structs table of CarPart database.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.CarParts.DBCARPART_MODELS">
            <summary>
            ID of the model table of CarPart database.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.CarParts.DBCARPART_OFFSETS">
            <summary>
            ID of the attribute offset table of CarPart database.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.ID.EAComp">
            <summary>
            Class of IDs related to <see cref="T:Nikki.Support.Shared.Class.Texture"/> compressions.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.EAComp.P8_08">
            <summary>
            PAL8 Compression = 0x8
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.EAComp.RGBA_08">
            <summary>
            RGBA Compression = 0x20
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.EAComp.DXT1_08">
            <summary>
            DXT1 Compression = 0x22
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.EAComp.DXT3_08">
            <summary>
            DXT3 Compression = 0x24
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.EAComp.DXT5_08">
            <summary>
            DXT5 Compression = 0x26
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.EAComp.SECRET">
            <summary>
            PAL8-64 Compression = 0x81
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.EAComp.P8_32">
            <summary>
            PAL8 Compression identifier in Part 5 of <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/>.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.EAComp.RGBA_32">
            <summary>
            RGBA Compression identifier in Part 5 of <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/>.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.EAComp.DXT1_32">
            <summary>
            DXT1 Compression identifier in Part 5 of <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/>.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.EAComp.DXT3_32">
            <summary>
            DXT3 Compression identifier in Part 5 of <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/>.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.EAComp.DXT5_32">
            <summary>
            DXT5 Compression identifier in Part 5 of <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/>.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.ID.Global">
            <summary>
            Class of IDs related to all global blocks.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.Global.Nikki">
            <summary>
            Special Nikki block ID
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.Global.STRBlocks">
            <summary>
            ID of <see cref="T:Nikki.Support.Shared.Class.STRBlock"/> block.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.Global.Materials">
            <summary>
            ID of <see cref="T:Nikki.Support.Shared.Class.Material"/> block.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.Global.TPKBlocks">
            <summary>
            ID of <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/> block.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.Global.CarTypeInfo">
            <summary>
            ID of <see cref="F:Nikki.Reflection.ID.Global.CarTypeInfo"/> block.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.Global.SlotTypes">
            <summary>
            ID of SlotTypes block.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.Global.CarParts">
            <summary>
            ID of DBCarPart block.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.Global.SunInfos">
            <summary>
            ID of <see cref="T:Nikki.Support.Shared.Class.SunInfo"/> block.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.Global.Tracks">
            <summary>
            ID of Tracks block.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.Global.PresetRides">
            <summary>
            ID of <see cref="T:Nikki.Support.Shared.Class.PresetRide"/> block.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.Global.PresetSkins">
            <summary>
            ID of <see cref="T:Nikki.Support.Shared.Class.PresetSkin"/> block.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.Global.Collisions">
            <summary>
            ID of Collision Bounds block.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.Global.CareerInfo">
            <summary>
            ID of Underground 2 GCareer block.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.Global.CarSkins">
            <summary>
            ID of Underground 2 CarSkins block.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.Global.FNGCompress">
            <summary>
            ID of compressed <see cref="T:Nikki.Support.Shared.Class.FNGroup"/> block.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.Global.FEngFiles">
            <summary>
            ID of decompressed <see cref="T:Nikki.Support.Shared.Class.FNGroup"/> block.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.Global.ELabGlobal">
            <summary>
            ID of ELabGlobal block.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.Global.AcidEmmiters">
            <summary>
            ID of AcidEmmiters block.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.Global.AcidEffects">
            <summary>
            ID of <see cref="T:Nikki.Support.Shared.Class.AcidEffect"/> block.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.Global.FloatChunk">
            <summary>
            ID of some unknown float chunk.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.ID.TPK">
            <summary>
            Class of IDs related to <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/>.
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.TPK.MAINID">
            <summary>
            Main ID
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.TPK.INFO_BLOCKID">
            <summary>
            Info block ID
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.TPK.DATA_BLOCKID">
            <summary>
            Data block ID
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.TPK.INFO_PART1_BLOCKID">
            <summary>
            Part 1 ID of Info block
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.TPK.INFO_PART2_BLOCKID">
            <summary>
            Part 2 ID of Info block
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.TPK.INFO_PART3_BLOCKID">
            <summary>
            Part 3 ID of Info block
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.TPK.INFO_PART4_BLOCKID">
            <summary>
            Part 4 ID of Info block
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.TPK.INFO_PART5_BLOCKID">
            <summary>
            Part 5 ID of Info block
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.TPK.BINDATA_BLOCKID">
            <summary>
            Binary data block ID
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.TPK.ANIM_BLOCKID">
            <summary>
            Anim block ID
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.TPK.ANIMPART1_BLOCKID">
            <summary>
            Part 1 ID of Anim block
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.TPK.ANIMPART2_BLOCKID">
            <summary>
            Part 2 ID of Anim block
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.TPK.DATA_PART1_BLOCKID">
            <summary>
            Part 1 ID of Data block
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.TPK.DATA_PART2_BLOCKID">
            <summary>
            Part 2 ID of Data block
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.TPK.DATA_PART3_BLOCKID">
            <summary>
            Part 3 ID of Data block
            </summary>
        </member>
        <member name="F:Nikki.Reflection.ID.TPK.COMPRESSED_TEXTURE">
            <summary>
            Compressed texture identifier.
            </summary>
        </member>
        <member name="T:Nikki.Reflection.Interface.ICastable`1">
            <summary>
            Interface with a method of casting memory of one object to another of the same type.
            </summary>
            <typeparam name="TypeID"><see cref="T:System.Type"/> of the class.</typeparam>
        </member>
        <member name="M:Nikki.Reflection.Interface.ICastable`1.MemoryCast(System.String)">
            <summary>
            Casts all attributes from this object to another one.
            </summary>
            <param name="CName">CollectionName of the new created object.</param>
            <returns>Memory casted copy of the object.</returns>
        </member>
        <member name="T:Nikki.Reflection.Interface.ICopyable`1">
            <summary>
            Interface with a method of generating plane copies of an object.
            </summary>
            <typeparam name="TypeID"><see cref="T:System.Type"/> of the class.</typeparam>
        </member>
        <member name="M:Nikki.Reflection.Interface.ICopyable`1.PlainCopy">
            <summary>
            Creates a plain copy of the object that contains same values.
            </summary>
            <returns>Exact plain copy of the object.</returns>
        </member>
        <member name="T:Nikki.Reflection.Interface.IReflective">
            <summary>
            <see cref="T:Nikki.Reflection.Interface.IReflective"/> is an interface with class reflection methods.
            </summary>
        </member>
        <member name="M:Nikki.Reflection.Interface.IReflective.GetAccessibles">
            <summary>
            Gets <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all properties with 
            <see cref="T:Nikki.Reflection.Attributes.AccessModifiableAttribute"/> attribute.
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of strings.</returns>
        </member>
        <member name="M:Nikki.Reflection.Interface.IReflective.GetValue(System.String)">
            <summary>
            Returns the value of a field name provided.
            </summary>
            <param name="PropertyName">Field name to get the value from.</param>
            <returns>String value of a field name.</returns>
        </member>
        <member name="M:Nikki.Reflection.Interface.IReflective.SetValue(System.String,System.Object)">
            <summary>
            Sets value at a field specified.
            </summary>
            <param name="PropertyName">Name of the field to be modified.</param>
            <param name="value">Value to be set at the field specified.</param>
            <returns>True on success; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Reflection.Interface.IReflective.SetValue(System.String,System.Object,System.String@)">
            <summary>
            Sets value at a field specified.
            </summary>
            <param name="PropertyName">Name of the field to be modified.</param>
            <param name="value">Value to be set at the field specified.</param>
            <param name="error">Error occured when trying to set value.</param>
            <returns>True on success; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Carbon.Class.DBModelPart.ToString">
            <summary>
            Returns CollectionName, BinKey and <see cref="T:Nikki.Support.Shared.Parts.CarParts.RealCarPart"/> count as a string value.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:Nikki.Support.Carbon.Framework.CarPartManager.Disassemble(System.IO.BinaryReader,System.Int32,Nikki.Database.Carbon)">
            <summary>
            Disassembles entire car parts block using <see cref="T:System.IO.BinaryReader"/> provided 
            into <see cref="T:Nikki.Support.Carbon.Class.DBModelPart"/> collections and stores them in 
            <see cref="T:Nikki.Database.Carbon"/> passed.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read data with.</param>
            <param name="size">Size of the car parts block.</param>
            <param name="db"><see cref="T:Nikki.Database.Carbon"/> where all collections 
            should be stored.</param>
        </member>
        <member name="M:Nikki.Support.Carbon.Framework.CarPartManager.Assemble(System.IO.BinaryWriter,Nikki.Database.Carbon)">
            <summary>
            Assembles entire root of <see cref="T:Nikki.Support.Carbon.Class.DBModelPart"/> into a byte array and 
            writes it with <see cref="T:System.IO.BinaryWriter"/> provided.
            </summary>
            <param name="bw"><see cref="T:System.IO.BinaryWriter"/> to write data with.</param>
            <param name="db"><see cref="T:Nikki.Database.Carbon"/> database with roots 
            and collections.</param>
        </member>
        <member name="T:Nikki.Support.Carbon.Parts.CarParts.CPStruct">
            <summary>
            A unit <see cref="T:Nikki.Support.Carbon.Parts.CarParts.RealCarPart"/> struct with geometry part names.
            </summary>
        </member>
        <member name="P:Nikki.Support.Carbon.Parts.CarParts.CPStruct.Exists">
            <summary>
            Indicates whether this struct should exist in the database or not.
            </summary>
        </member>
        <member name="P:Nikki.Support.Carbon.Parts.CarParts.CPStruct.Templated">
            <summary>
            If true, all strings are built using string block; otherwise they are stored as keys.
            </summary>
        </member>
        <member name="P:Nikki.Support.Carbon.Parts.CarParts.CPStruct.Concatenator">
            <summary>
            String that is used to be concatenated in front of geometry names.
            </summary>
        </member>
        <member name="P:Nikki.Support.Carbon.Parts.CarParts.CPStruct.ConcatenatorExists">
            <summary>
            True if concatenator string exists; false otherwise.
            </summary>
        </member>
        <member name="P:Nikki.Support.Carbon.Parts.CarParts.CPStruct.GeometryName">
            <summary>
            Geometry names of the struct.
            </summary>
        </member>
        <member name="P:Nikki.Support.Carbon.Parts.CarParts.CPStruct.GeometryExists">
            <summary>
            Indicates existing geometries in the struct.
            </summary>
        </member>
        <member name="F:Nikki.Support.Carbon.Parts.CarParts.CPStruct.StructNamesSize">
            <summary>
            Amount of geometries stored in the struct.
            </summary>
        </member>
        <member name="M:Nikki.Support.Carbon.Parts.CarParts.CPStruct.#ctor">
            <summary>
            Initialized new instance of <see cref="T:Nikki.Support.Carbon.Parts.CarParts.CPStruct"/>.
            </summary>
        </member>
        <member name="M:Nikki.Support.Carbon.Parts.CarParts.CPStruct.#ctor(System.IO.BinaryReader,System.IO.BinaryReader)">
            <summary>
            Initializes new instance of <see cref="T:Nikki.Support.Carbon.Parts.CarParts.CPStruct"/>.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read with.</param>
            <param name="str_reader"><see cref="T:System.IO.BinaryReader"/> to read strings with.</param>
        </member>
        <member name="M:Nikki.Support.Carbon.Parts.CarParts.CPStruct.Disassemble(System.IO.BinaryReader,System.IO.BinaryReader)">
            <summary>
            Disassembles byte array into <see cref="T:Nikki.Support.Carbon.Parts.CarParts.CPStruct"/> using <see cref="T:System.IO.BinaryReader"/> 
            provided.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read with.</param>
            <param name="str_reader"><see cref="T:System.IO.BinaryReader"/> to read strings with.</param>
        </member>
        <member name="M:Nikki.Support.Carbon.Parts.CarParts.CPStruct.Assemble(System.IO.BinaryWriter,System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Assembles <see cref="T:Nikki.Support.Carbon.Parts.CarParts.CPStruct"/> and writes it using <see cref="T:System.IO.BinaryWriter"/> 
            provided.
            </summary>
            <param name="bw"><see cref="T:System.IO.BinaryWriter"/> to write with.</param>
            <param name="string_dict">Dictionary with string HashCodes and their offsets.</param>
        </member>
        <member name="M:Nikki.Support.Carbon.Parts.CarParts.CPStruct.ToString">
            <summary>
            Returns templated value and first geometry name as a string value.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:Nikki.Support.Carbon.Parts.CarParts.CPStruct.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object, which must also be a
            <see cref="T:Nikki.Support.Carbon.Parts.CarParts.CPStruct"/> object, have the same value.
            </summary>
            <param name="obj">The <see cref="T:Nikki.Support.Carbon.Parts.CarParts.CPStruct"/> to compare to this instance.</param>
            <returns>True if obj is a <see cref="T:Nikki.Support.Carbon.Parts.CarParts.CPStruct"/> and its value is the same as 
            this instance; false otherwise. If obj is null, the method returns false.
            </returns>
        </member>
        <member name="M:Nikki.Support.Carbon.Parts.CarParts.CPStruct.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Nikki.Support.Carbon.Parts.CarParts.CPStruct"/>.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Nikki.Support.Carbon.Parts.CarParts.CPStruct.op_Equality(Nikki.Support.Carbon.Parts.CarParts.CPStruct,Nikki.Support.Carbon.Parts.CarParts.CPStruct)">
            <summary>
            Determines whether two specified <see cref="T:Nikki.Support.Carbon.Parts.CarParts.CPStruct"/> have the same value.
            </summary>
            <param name="cp1">The first <see cref="T:Nikki.Support.Carbon.Parts.CarParts.CPStruct"/> to compare, or null.</param>
            <param name="cp2">The second <see cref="T:Nikki.Support.Carbon.Parts.CarParts.CPStruct"/> to compare, or null.</param>
            <returns>True if the value of c1 is the same as the value of c2; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Carbon.Parts.CarParts.CPStruct.op_Inequality(Nikki.Support.Carbon.Parts.CarParts.CPStruct,Nikki.Support.Carbon.Parts.CarParts.CPStruct)">
            <summary>
            Determines whether two specified <see cref="T:Nikki.Support.Carbon.Parts.CarParts.CPStruct"/> have different values.
            </summary>
            <param name="cp1">The first <see cref="T:Nikki.Support.Carbon.Parts.CarParts.CPStruct"/> to compare, or null.</param>
            <param name="cp2">The second <see cref="T:Nikki.Support.Carbon.Parts.CarParts.CPStruct"/> to compare, or null.</param>
            <returns>True if the value of c1 is different from the value of c2; false otherwise.</returns>
        </member>
        <member name="T:Nikki.Support.Carbon.Parts.CarParts.RealCarPart">
            <summary>
            A unit CarPart attribute of <see cref="T:Nikki.Support.Carbon.Class.DBModelPart"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Carbon.Parts.CarParts.RealCarPart.PartName">
            <summary>
            Name of this <see cref="T:Nikki.Support.Carbon.Parts.CarParts.RealCarPart"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Carbon.Parts.CarParts.RealCarPart.Index">
            <summary>
            Index of <see cref="T:Nikki.Support.Carbon.Class.DBModelPart"/> to which this part belongs to.
            </summary>
        </member>
        <member name="P:Nikki.Support.Carbon.Parts.CarParts.RealCarPart.Attributes">
            <summary>
            Collection of <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPAttribute"/> of this <see cref="T:Nikki.Support.Carbon.Parts.CarParts.RealCarPart"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Carbon.Parts.CarParts.RealCarPart.Model">
            <summary>
            <see cref="T:Nikki.Support.Carbon.Class.DBModelPart"/> to which this part belongs to.
            </summary>
        </member>
        <member name="M:Nikki.Support.Carbon.Parts.CarParts.RealCarPart.#ctor">
            <summary>
            Initialize new instance of <see cref="T:Nikki.Support.Carbon.Parts.CarParts.RealCarPart"/>.
            </summary>
        </member>
        <member name="M:Nikki.Support.Carbon.Parts.CarParts.RealCarPart.#ctor(System.Int32,Nikki.Support.Carbon.Class.DBModelPart)">
            <summary>
            Initialize new instance of <see cref="T:Nikki.Support.Carbon.Parts.CarParts.RealCarPart"/>.
            </summary>
            <param name="index">Index of the <see cref="T:Nikki.Support.Carbon.Class.DBModelPart"/> in the database.</param>
            <param name="model"><see cref="T:Nikki.Support.Carbon.Class.DBModelPart"/> to which this part belongs to.</param>
        </member>
        <member name="M:Nikki.Support.Carbon.Parts.CarParts.RealCarPart.#ctor(System.Int32,System.Int32,Nikki.Support.Carbon.Class.DBModelPart)">
            <summary>
            Initialize new instance of <see cref="T:Nikki.Support.Carbon.Parts.CarParts.RealCarPart"/>.
            </summary>
            <param name="index">Index of the <see cref="T:Nikki.Support.Carbon.Class.DBModelPart"/> in the database.</param>
            <param name="capacity">Initial capacity of the attribute list.</param>
            <param name="model"><see cref="T:Nikki.Support.Carbon.Class.DBModelPart"/> to which this part belongs to.</param>
        </member>
        <member name="M:Nikki.Support.Carbon.Parts.CarParts.RealCarPart.ToString">
            <summary>
            Returns PartName, Attributes count and CarPartGroupID as a string value.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:Nikki.Support.Carbon.Parts.CarParts.RealCarPart.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Nikki.Support.Carbon.Parts.CarParts.RealCarPart"/>.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="T:Nikki.Support.Carbon.Parts.CarParts.TempPart">
            <summary>
            Represents temporary car part that is used to build <see cref="T:Nikki.Support.Carbon.Parts.CarParts.RealCarPart"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Carbon.Parts.CarParts.TempPart.Padding">
            <summary>
            Padding byte
            </summary>
        </member>
        <member name="P:Nikki.Support.Carbon.Parts.CarParts.TempPart.Index">
            <summary>
            Index of the model of the car.
            </summary>
        </member>
        <member name="P:Nikki.Support.Carbon.Parts.CarParts.TempPart.AttribOffset">
            <summary>
            Attribute offset of the part.
            </summary>
        </member>
        <member name="M:Nikki.Support.Carbon.Parts.CarParts.TempPart.Disassemble(System.IO.BinaryReader)">
            <summary>
            Disassembles array of bytes into <see cref="T:Nikki.Support.Carbon.Parts.CarParts.TempPart"/>.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read with.</param>
        </member>
        <member name="M:Nikki.Support.MostWanted.Class.DBModelPart.ToString">
            <summary>
            Returns CollectionName, BinKey and <see cref="T:Nikki.Support.Shared.Parts.CarParts.RealCarPart"/> count as a string value.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:Nikki.Support.MostWanted.Framework.CarPartManager.Disassemble(System.IO.BinaryReader,System.Int32,Nikki.Database.MostWanted)">
            <summary>
            Disassembles entire car parts block using <see cref="T:System.IO.BinaryReader"/> provided 
            into <see cref="T:Nikki.Support.MostWanted.Class.DBModelPart"/> collections and stores them in 
            <see cref="T:Nikki.Database.MostWanted"/> passed.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read data with.</param>
            <param name="size">Size of the car parts block.</param>
            <param name="db"><see cref="T:Nikki.Database.MostWanted"/> where all collections 
            should be stored.</param>
        </member>
        <member name="M:Nikki.Support.MostWanted.Framework.CarPartManager.Assemble(System.IO.BinaryWriter,Nikki.Database.MostWanted)">
            <summary>
            Assembles entire root of <see cref="T:Nikki.Support.MostWanted.Class.DBModelPart"/> into a byte array and 
            writes it with <see cref="T:System.IO.BinaryWriter"/> provided.
            </summary>
            <param name="bw"><see cref="T:System.IO.BinaryWriter"/> to write data with.</param>
            <param name="db"><see cref="T:Nikki.Database.MostWanted"/> database with roots 
            and collections.</param>
        </member>
        <member name="T:Nikki.Support.MostWanted.Parts.CarParts.CPStruct">
            <summary>
            A unit <see cref="T:Nikki.Support.MostWanted.Parts.CarParts.RealCarPart"/> struct with geometry part names.
            </summary>
        </member>
        <member name="P:Nikki.Support.MostWanted.Parts.CarParts.CPStruct.Exists">
            <summary>
            Indicates whether this struct should exist in the database or not.
            </summary>
        </member>
        <member name="P:Nikki.Support.MostWanted.Parts.CarParts.CPStruct.Templated">
            <summary>
            If true, all strings are built using string block; otherwise they are stored as keys.
            </summary>
        </member>
        <member name="P:Nikki.Support.MostWanted.Parts.CarParts.CPStruct.Concatenator">
            <summary>
            String that is used to be concatenated in front of geometry names.
            </summary>
        </member>
        <member name="P:Nikki.Support.MostWanted.Parts.CarParts.CPStruct.GeometryName1">
            <summary>
            Geometry name 1 of this <see cref="T:Nikki.Support.MostWanted.Parts.CarParts.CPStruct"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.MostWanted.Parts.CarParts.CPStruct.GeometryName2">
            <summary>
            Geometry name 2 of this <see cref="T:Nikki.Support.MostWanted.Parts.CarParts.CPStruct"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.MostWanted.Parts.CarParts.CPStruct.GeometryName3">
            <summary>
            Geometry name 3 of this <see cref="T:Nikki.Support.MostWanted.Parts.CarParts.CPStruct"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.MostWanted.Parts.CarParts.CPStruct.GeometryName4">
            <summary>
            Geometry name 4 of this <see cref="T:Nikki.Support.MostWanted.Parts.CarParts.CPStruct"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.MostWanted.Parts.CarParts.CPStruct.GeometryName5">
            <summary>
            Geometry name 5 of this <see cref="T:Nikki.Support.MostWanted.Parts.CarParts.CPStruct"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.MostWanted.Parts.CarParts.CPStruct.ConcatenatorExists">
            <summary>
            True if concatenator string exists; false otherwise.
            </summary>
        </member>
        <member name="P:Nikki.Support.MostWanted.Parts.CarParts.CPStruct.Geometry1Exists">
            <summary>
            True if geometry 1 exists; false othewise.
            </summary>
        </member>
        <member name="P:Nikki.Support.MostWanted.Parts.CarParts.CPStruct.Geometry2Exists">
            <summary>
            True if geometry 2 exists; false othewise.
            </summary>
        </member>
        <member name="P:Nikki.Support.MostWanted.Parts.CarParts.CPStruct.Geometry3Exists">
            <summary>
            True if geometry 3 exists; false othewise.
            </summary>
        </member>
        <member name="P:Nikki.Support.MostWanted.Parts.CarParts.CPStruct.Geometry4Exists">
            <summary>
            True if geometry 4 exists; false othewise.
            </summary>
        </member>
        <member name="P:Nikki.Support.MostWanted.Parts.CarParts.CPStruct.Geometry5Exists">
            <summary>
            True if geometry 5 exists; false othewise.
            </summary>
        </member>
        <member name="M:Nikki.Support.MostWanted.Parts.CarParts.CPStruct.#ctor">
            <summary>
            Initialized new instance of <see cref="T:Nikki.Support.MostWanted.Parts.CarParts.CPStruct"/>.
            </summary>
        </member>
        <member name="M:Nikki.Support.MostWanted.Parts.CarParts.CPStruct.#ctor(System.IO.BinaryReader,System.IO.BinaryReader)">
            <summary>
            Initializes new instance of <see cref="T:Nikki.Support.MostWanted.Parts.CarParts.CPStruct"/>.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read with.</param>
            <param name="str_reader"><see cref="T:System.IO.BinaryReader"/> to read strings with.</param>
        </member>
        <member name="M:Nikki.Support.MostWanted.Parts.CarParts.CPStruct.Disassemble(System.IO.BinaryReader,System.IO.BinaryReader)">
            <summary>
            Disassembles byte array into <see cref="T:Nikki.Support.MostWanted.Parts.CarParts.CPStruct"/> using <see cref="T:System.IO.BinaryReader"/> 
            provided.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read with.</param>
            <param name="str_reader"><see cref="T:System.IO.BinaryReader"/> to read strings with.</param>
        </member>
        <member name="M:Nikki.Support.MostWanted.Parts.CarParts.CPStruct.Assemble(System.IO.BinaryWriter,System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Assembles <see cref="T:Nikki.Support.MostWanted.Parts.CarParts.CPStruct"/> and writes it using <see cref="T:System.IO.BinaryWriter"/> 
            provided.
            </summary>
            <param name="bw"><see cref="T:System.IO.BinaryWriter"/> to write with.</param>
            <param name="string_dict">Dictionary with string HashCodes and their offsets.</param>
        </member>
        <member name="M:Nikki.Support.MostWanted.Parts.CarParts.CPStruct.ToString">
            <summary>
            Returns templated value and first geometry name as a string value.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:Nikki.Support.MostWanted.Parts.CarParts.CPStruct.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object, which must also be a
            <see cref="T:Nikki.Support.MostWanted.Parts.CarParts.CPStruct"/> object, have the same value.
            </summary>
            <param name="obj">The <see cref="T:Nikki.Support.MostWanted.Parts.CarParts.CPStruct"/> to compare to this instance.</param>
            <returns>True if obj is a <see cref="T:Nikki.Support.MostWanted.Parts.CarParts.CPStruct"/> and its value is the same as 
            this instance; false otherwise. If obj is null, the method returns false.
            </returns>
        </member>
        <member name="M:Nikki.Support.MostWanted.Parts.CarParts.CPStruct.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Nikki.Support.MostWanted.Parts.CarParts.CPStruct"/>.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Nikki.Support.MostWanted.Parts.CarParts.CPStruct.op_Equality(Nikki.Support.MostWanted.Parts.CarParts.CPStruct,Nikki.Support.MostWanted.Parts.CarParts.CPStruct)">
            <summary>
            Determines whether two specified <see cref="T:Nikki.Support.MostWanted.Parts.CarParts.CPStruct"/> have the same value.
            </summary>
            <param name="cp1">The first <see cref="T:Nikki.Support.MostWanted.Parts.CarParts.CPStruct"/> to compare, or null.</param>
            <param name="cp2">The second <see cref="T:Nikki.Support.MostWanted.Parts.CarParts.CPStruct"/> to compare, or null.</param>
            <returns>True if the value of c1 is the same as the value of c2; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.MostWanted.Parts.CarParts.CPStruct.op_Inequality(Nikki.Support.MostWanted.Parts.CarParts.CPStruct,Nikki.Support.MostWanted.Parts.CarParts.CPStruct)">
            <summary>
            Determines whether two specified <see cref="T:Nikki.Support.MostWanted.Parts.CarParts.CPStruct"/> have different values.
            </summary>
            <param name="cp1">The first <see cref="T:Nikki.Support.MostWanted.Parts.CarParts.CPStruct"/> to compare, or null.</param>
            <param name="cp2">The second <see cref="T:Nikki.Support.MostWanted.Parts.CarParts.CPStruct"/> to compare, or null.</param>
            <returns>True if the value of c1 is different from the value of c2; false otherwise.</returns>
        </member>
        <member name="T:Nikki.Support.MostWanted.Parts.CarParts.RealCarPart">
            <summary>
            A unit CarPart attribute of <see cref="T:Nikki.Support.MostWanted.Class.DBModelPart"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.MostWanted.Parts.CarParts.RealCarPart.PartName">
            <summary>
            Name of this <see cref="T:Nikki.Support.MostWanted.Parts.CarParts.RealCarPart"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.MostWanted.Parts.CarParts.RealCarPart.Index">
            <summary>
            Index of <see cref="T:Nikki.Support.MostWanted.Class.DBModelPart"/> to which this part belongs to.
            </summary>
        </member>
        <member name="P:Nikki.Support.MostWanted.Parts.CarParts.RealCarPart.Attributes">
            <summary>
            Collection of <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPAttribute"/> of this <see cref="T:Nikki.Support.MostWanted.Parts.CarParts.RealCarPart"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.MostWanted.Parts.CarParts.RealCarPart.Struct">
            <summary>
            A <see cref="T:Nikki.Support.MostWanted.Parts.CarParts.CPStruct"/> of this <see cref="T:Nikki.Support.MostWanted.Parts.CarParts.RealCarPart"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.MostWanted.Parts.CarParts.RealCarPart.Model">
            <summary>
            <see cref="T:Nikki.Support.MostWanted.Class.DBModelPart"/> to which this part belongs to.
            </summary>
        </member>
        <member name="P:Nikki.Support.MostWanted.Parts.CarParts.RealCarPart.CarPartGroupID">
            <summary>
            Car Part ID Group to which this part belongs to.
            </summary>
        </member>
        <member name="P:Nikki.Support.MostWanted.Parts.CarParts.RealCarPart.UpgradeGroupID">
            <summary>
            Upgrade group ID of this <see cref="T:Nikki.Support.MostWanted.Parts.CarParts.RealCarPart"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.MostWanted.Parts.CarParts.RealCarPart.DebugName">
            <summary>
            Debug name of this <see cref="T:Nikki.Support.MostWanted.Parts.CarParts.RealCarPart"/>.
            </summary>
        </member>
        <member name="M:Nikki.Support.MostWanted.Parts.CarParts.RealCarPart.#ctor">
            <summary>
            Initialize new instance of <see cref="T:Nikki.Support.MostWanted.Parts.CarParts.RealCarPart"/>.
            </summary>
        </member>
        <member name="M:Nikki.Support.MostWanted.Parts.CarParts.RealCarPart.#ctor(System.Int32,Nikki.Support.MostWanted.Class.DBModelPart)">
            <summary>
            Initialize new instance of <see cref="T:Nikki.Support.MostWanted.Parts.CarParts.RealCarPart"/>.
            </summary>
            <param name="index">Index of the <see cref="T:Nikki.Support.MostWanted.Class.DBModelPart"/> in the database.</param>
            <param name="model"><see cref="T:Nikki.Support.MostWanted.Class.DBModelPart"/> to which this part belongs to.</param>
        </member>
        <member name="M:Nikki.Support.MostWanted.Parts.CarParts.RealCarPart.#ctor(System.Int32,System.Int32,Nikki.Support.MostWanted.Class.DBModelPart)">
            <summary>
            Initialize new instance of <see cref="T:Nikki.Support.MostWanted.Parts.CarParts.RealCarPart"/>.
            </summary>
            <param name="index">Index of the <see cref="T:Nikki.Support.MostWanted.Class.DBModelPart"/> in the database.</param>
            <param name="capacity">Initial capacity of the attribute list.</param>
            <param name="model"><see cref="T:Nikki.Support.MostWanted.Class.DBModelPart"/> to which this part belongs to.</param>
        </member>
        <member name="M:Nikki.Support.MostWanted.Parts.CarParts.RealCarPart.ToString">
            <summary>
            Returns PartName, Attributes count and CarPartGroupID as a string value.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:Nikki.Support.MostWanted.Parts.CarParts.RealCarPart.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Nikki.Support.MostWanted.Parts.CarParts.RealCarPart"/>.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="T:Nikki.Support.MostWanted.Parts.CarParts.TempPart">
            <summary>
            Represents temporary car part that is used to build <see cref="T:Nikki.Support.MostWanted.Parts.CarParts.RealCarPart"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.MostWanted.Parts.CarParts.TempPart.PartNameHash">
            <summary>
            Hash of the part name.
            </summary>
        </member>
        <member name="P:Nikki.Support.MostWanted.Parts.CarParts.TempPart.CarPartGroupID">
            <summary>
            Group ID of the car.
            </summary>
        </member>
        <member name="P:Nikki.Support.MostWanted.Parts.CarParts.TempPart.UpgradeGroupID">
            <summary>
            Unknown yet value.
            </summary>
        </member>
        <member name="P:Nikki.Support.MostWanted.Parts.CarParts.TempPart.Index">
            <summary>
            Index of the model of the car.
            </summary>
        </member>
        <member name="P:Nikki.Support.MostWanted.Parts.CarParts.TempPart.DebugName">
            <summary>
            Debug name of the part.
            </summary>
        </member>
        <member name="P:Nikki.Support.MostWanted.Parts.CarParts.TempPart.AttribOffset">
            <summary>
            Attribute offset of the part.
            </summary>
        </member>
        <member name="P:Nikki.Support.MostWanted.Parts.CarParts.TempPart.StructOffset">
            <summary>
            Struct offset of the part.
            </summary>
        </member>
        <member name="M:Nikki.Support.MostWanted.Parts.CarParts.TempPart.Disassemble(System.IO.BinaryReader,System.IO.BinaryReader)">
            <summary>
            Disassembles array of bytes into <see cref="T:Nikki.Support.MostWanted.Parts.CarParts.TempPart"/>.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read with.</param>
            <param name="str_reader"><see cref="T:System.IO.BinaryReader"/> to read strings with.</param>
        </member>
        <member name="T:Nikki.Support.Shared.Class.AcidEffect">
            <summary>
            <see cref="T:Nikki.Support.Shared.Class.AcidEffect"/> is a collection of vectors and attributes related to acids and xenons.
            </summary>
        </member>
        <member name="F:Nikki.Support.Shared.Class.AcidEffect._Localizer">
            <summary>
            Constant value used in the header.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.AcidEffect.CollectionName">
            <summary>
            Collection name of the variable.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.AcidEffect.GameINT">
            <summary>
            Game to which the class belongs to.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.AcidEffect.GameSTR">
            <summary>
            Game string to which the class belongs to.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.AcidEffect.BinKey">
            <summary>
            Binary memory hash of the collection name.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.AcidEffect.VltKey">
            <summary>
            Vault memory hash of the collection name.
            </summary>
        </member>
        <member name="M:Nikki.Support.Shared.Class.AcidEffect.Assemble(System.IO.BinaryWriter)">
            <summary>
            Assembles <see cref="T:Nikki.Support.Shared.Class.AcidEffect"/> into a byte array.
            </summary>
            <param name="bw"><see cref="T:System.IO.BinaryWriter"/> to write <see cref="T:Nikki.Support.Shared.Class.AcidEffect"/> with.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Class.AcidEffect.Disassemble(System.IO.BinaryReader)">
            <summary>
            Disassembles array into <see cref="T:Nikki.Support.Shared.Class.AcidEffect"/> properties.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read <see cref="T:Nikki.Support.Shared.Class.AcidEffect"/> with.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Class.AcidEffect.MemoryCast(System.String)">
            <summary>
            Casts all attributes from this object to another one.
            </summary>
            <param name="CName">CollectionName of the new created object.</param>
            <returns>Memory casted copy of the object.</returns>
        </member>
        <member name="T:Nikki.Support.Shared.Class.CarTypeInfo">
            <summary>
            <see cref="T:Nikki.Support.Shared.Class.CarTypeInfo"/> is a collection of settings related to a car's basic information.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.CollectionName">
            <summary>
            Collection name of the variable.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.GameINT">
            <summary>
            Game to which the class belongs to.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.GameSTR">
            <summary>
            Game string to which the class belongs to.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.BinKey">
            <summary>
            Binary memory hash of the collection name.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.VltKey">
            <summary>
            Vault memory hash of the collection name.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.ManufacturerName">
            <summary>
            Represents manufacturer name of the cartypeinfo.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.Index">
            <summary>
            Represents index of the <see cref="T:Nikki.Support.Shared.Class.CarTypeInfo"/> in Global data.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.UsageType">
            <summary>
            Represents usage type of the <see cref="T:Nikki.Support.Shared.Class.CarTypeInfo"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.IsSkinnable">
            <summary>
            Represents boolean as an int of whether <see cref="T:Nikki.Support.Shared.Class.CarTypeInfo"/> is skinnable.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.DefaultBasePaint">
            <summary>
            Represents paint type of the cartypeinfo.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.HeadlightFOV">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.PadHighPerformance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.NumAvailableSkinNumbers">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.WhatGame">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.ConvertibleFlag">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.WheelOuterRadius">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.WheelInnerRadiusMin">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.WheelInnerRadiusMax">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.HeadlightPositionX">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.HeadlightPositionY">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.HeadlightPositionZ">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.HeadlightPositionW">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.DriverRenderingOffsetX">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.DriverRenderingOffsetY">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.DriverRenderingOffsetZ">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.DriverRenderingOffsetW">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.SteeringWheelRenderingX">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.SteeringWheelRenderingY">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.SteeringWheelRenderingZ">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.SteeringWheelRenderingW">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.MaxInstances1">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.MaxInstances2">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.MaxInstances3">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.MaxInstances4">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.MaxInstances5">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.KeepLoaded1">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.KeepLoaded2">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.KeepLoaded3">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.KeepLoaded4">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.KeepLoaded5">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.MinTimeBetweenUses1">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.MinTimeBetweenUses2">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.MinTimeBetweenUses3">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.MinTimeBetweenUses4">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.MinTimeBetweenUses5">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.AvailableSkinNumbers01">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.AvailableSkinNumbers02">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.AvailableSkinNumbers03">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.AvailableSkinNumbers04">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.AvailableSkinNumbers05">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.AvailableSkinNumbers06">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.AvailableSkinNumbers07">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.AvailableSkinNumbers08">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.AvailableSkinNumbers09">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.AvailableSkinNumbers10">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.CarTypeInfo.DefaultSkinNumber">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nikki.Support.Shared.Class.CarTypeInfo.Assemble(System.IO.BinaryWriter)">
            <summary>
            Assembles <see cref="T:Nikki.Support.Shared.Class.CarTypeInfo"/> into a byte array.
            </summary>
            <param name="bw"><see cref="T:System.IO.BinaryWriter"/> to write <see cref="T:Nikki.Support.Shared.Class.CarTypeInfo"/> with.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Class.CarTypeInfo.Disassemble(System.IO.BinaryReader)">
            <summary>
            Disassembles array into <see cref="T:Nikki.Support.Shared.Class.CarTypeInfo"/> properties.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read <see cref="T:Nikki.Support.Shared.Class.CarTypeInfo"/> with.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Class.CarTypeInfo.MemoryCast(System.String)">
            <summary>
            Casts all attributes from this object to another one.
            </summary>
            <param name="CName">CollectionName of the new created object.</param>
            <returns>Memory casted copy of the object.</returns>
        </member>
        <member name="T:Nikki.Support.Shared.Class.DBModelPart">
            <summary>
            <see cref="T:Nikki.Support.Shared.Class.DBModelPart"/> is a collection of car parts of a specific model.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.DBModelPart.Index">
            <summary>
            Index of this <see cref="T:Nikki.Support.Shared.Class.DBModelPart"/> in the database.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.DBModelPart.CollectionName">
            <summary>
            Collection name of the variable.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.DBModelPart.GameINT">
            <summary>
            Game to which the class belongs to.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.DBModelPart.GameSTR">
            <summary>
            Game string to which the class belongs to.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.DBModelPart.BinKey">
            <summary>
            Binary memory hash of the collection name.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.DBModelPart.VltKey">
            <summary>
            Vault memory hash of the collection name.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.DBModelPart.ModelCarParts">
            <summary>
            List of <see cref="T:Nikki.Support.Shared.Parts.CarParts.RealCarPart"/> that this <see cref="T:Nikki.Support.Shared.Class.DBModelPart"/> has.
            </summary>
        </member>
        <member name="M:Nikki.Support.Shared.Class.DBModelPart.MemoryCast(System.String)">
            <summary>
            Casts all attributes from this object to another one.
            </summary>
            <param name="CName">CollectionName of the new created object.</param>
            <returns>Memory casted copy of the object.</returns>
        </member>
        <member name="T:Nikki.Support.Shared.Class.FNGroup">
            <summary>
            <see cref="T:Nikki.Support.Shared.Class.FNGroup"/> is a collection of frontend group elements and scripts.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.FNGroup.CollectionName">
            <summary>
            Collection Name of the class.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.FNGroup.GameINT">
            <summary>
            Game to which the class belongs to.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.FNGroup.GameSTR">
            <summary>
            Game string to which the class belongs to.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.FNGroup.BinKey">
            <summary>
            Binary memory hash of the Collection Name.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.FNGroup.VltKey">
            <summary>
            Vault memory hash of the Collection Name.
            </summary>
        </member>
        <member name="F:Nikki.Support.Shared.Class.FNGroup._colorinfo">
            <summary>
            List of all <see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/> that <see cref="T:Nikki.Support.Shared.Class.FNGroup"/> contains.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.FNGroup.InfoLength">
            <summary>
            Length of the color information array.
            </summary>
        </member>
        <member name="M:Nikki.Support.Shared.Class.FNGroup.MemoryCast(System.String)">
            <summary>
            Casts all attributes from this object to another one.
            </summary>
            <param name="CName">CollectionName of the new created object.</param>
            <returns>Memory casted copy of the object.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.FNGroup.Assemble(System.IO.BinaryWriter)">
            <summary>
            Assembles <see cref="T:Nikki.Support.Shared.Class.FNGroup"/> into a byte array.
            </summary>
            <param name="bw"><see cref="T:System.IO.BinaryWriter"/> to write <see cref="T:Nikki.Support.Shared.Class.FNGroup"/> with.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Class.FNGroup.Disassemble(System.IO.BinaryReader)">
            <summary>
            Disassembles array into <see cref="T:Nikki.Support.Shared.Class.FNGroup"/> properties.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read <see cref="T:Nikki.Support.Shared.Class.FNGroup"/> with.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Class.FNGroup.GetColor(System.Int32)">
            <summary>
            Gets <see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/> from a specific index.
            </summary>
            <param name="index">Index of the color.</param>
            <returns><see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/> class.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.FNGroup.TrySetOne(System.Int32,Nikki.Support.Shared.Parts.FNGParts.FEngColor)">
            <summary>
            Attempts to set new <see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/> at specific color.
            </summary>
            <param name="index">Index of the color to set.</param>
            <param name="color">New <see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/> to set.</param>
            <returns>True if setting new color was successful; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.FNGroup.TrySetOne(System.Int32,Nikki.Support.Shared.Parts.FNGParts.FEngColor,System.String@)">
            <summary>
            Attempts to set new <see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/> at specific color.
            </summary>
            <param name="index">Index of the color to set.</param>
            <param name="color">New <see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/> to set.</param>
            <param name="error">Error occured when trying to set one color.</param>
            <returns>True if setting new color was successful; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.FNGroup.TrySetSame(System.Int32,Nikki.Support.Shared.Parts.FNGParts.FEngColor,System.Boolean)">
            <summary>
            Attempts to set same <see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/> to a specific color.
            </summary>
            <param name="index">Index of the <see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/> to match.</param>
            <param name="newbase">New <see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/> to set.</param>
            <param name="keepalpha">True if alpha value should be kept; false otherwise.</param>
            <returns>True if setting same colors was successful; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.FNGroup.TrySetSame(System.Int32,Nikki.Support.Shared.Parts.FNGParts.FEngColor,System.Boolean,System.String@)">
            <summary>
            Attempts to set same <see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/> to a specific color.
            </summary>
            <param name="index">Index of the <see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/> to match.</param>
            <param name="newbase">New <see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/> to set.</param>
            <param name="keepalpha">True if alpha value should be kept; false otherwise.</param>
            <param name="error">Error occured when trying to set same colors.</param>
            <returns>True if setting same colors was successful; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.FNGroup.TrySetAll(Nikki.Support.Shared.Parts.FNGParts.FEngColor,System.Boolean)">
            <summary>
            Attempts to set all <see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/> to a specific color.
            </summary>
            <param name="color"><see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/> to set for all colors.</param>
            <param name="keepalpha">True if alpha value should be kept; false otherwise.</param>
            <returns>True if setting all colors was successful; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.FNGroup.TrySetAll(Nikki.Support.Shared.Parts.FNGParts.FEngColor,System.Boolean,System.String@)">
            <summary>
            Attempts to set all <see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/> to a specific color.
            </summary>
            <param name="color"><see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/> to set for all colors.</param>
            <param name="keepalpha">True if alpha value should be kept; false otherwise.</param>
            <param name="error">Error occured when trying to set all colors.</param>
            <returns>True if setting all colors was successful; false otherwise.</returns>
        </member>
        <member name="T:Nikki.Support.Shared.Class.Material">
            <summary>
            <see cref="T:Nikki.Support.Shared.Class.Material"/> is a collection of float attributes of shaders and materials.
            </summary>
        </member>
        <member name="F:Nikki.Support.Shared.Class.Material._Unknown0">
            <summary>
            Value representing int(0)
            </summary>
        </member>
        <member name="F:Nikki.Support.Shared.Class.Material._Unknown1">
            <summary>
            Value representing int(1).
            </summary>
        </member>
        <member name="F:Nikki.Support.Shared.Class.Material._Localizer">
            <summary>
            Localization value for <see cref="T:Nikki.Support.Shared.Class.Material"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.Material.CollectionName">
            <summary>
            Collection name of the variable.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.Material.GameINT">
            <summary>
            Game to which the class belongs to.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.Material.GameSTR">
            <summary>
            Game string to which the class belongs to.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.Material.BinKey">
            <summary>
            Binary memory hash of the collection name.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.Material.VltKey">
            <summary>
            Vault memory hash of the collection name.
            </summary>
        </member>
        <member name="M:Nikki.Support.Shared.Class.Material.Assemble(System.IO.BinaryWriter)">
            <summary>
            Assembles <see cref="T:Nikki.Support.Shared.Class.Material"/> into a byte array.
            </summary>
            <param name="bw"><see cref="T:System.IO.BinaryWriter"/> to write <see cref="T:Nikki.Support.Shared.Class.Material"/> with.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Class.Material.Disassemble(System.IO.BinaryReader)">
            <summary>
            Disassembles array into <see cref="T:Nikki.Support.Shared.Class.Material"/> properties.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read <see cref="T:Nikki.Support.Shared.Class.Material"/> with.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Class.Material.MemoryCast(System.String)">
            <summary>
            Casts all attributes from this object to another one.
            </summary>
            <param name="CName">CollectionName of the new created object.</param>
            <returns>Memory casted copy of the object.</returns>
        </member>
        <member name="T:Nikki.Support.Shared.Class.PresetRide">
            <summary>
            <see cref="T:Nikki.Support.Shared.Class.PresetRide"/> is a collection of specific settings of a ride.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.PresetRide.CollectionName">
            <summary>
            Collection name of the variable.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.PresetRide.GameINT">
            <summary>
            Game to which the class belongs to.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.PresetRide.GameSTR">
            <summary>
            Game string to which the class belongs to.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.PresetRide.BinKey">
            <summary>
            Binary memory hash of the collection name.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.PresetRide.VltKey">
            <summary>
            Vault memory hash of the collection name.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.PresetRide.MODEL">
            <summary>
            Represents model of the preset ride.
            </summary>
        </member>
        <member name="M:Nikki.Support.Shared.Class.PresetRide.Assemble(System.IO.BinaryWriter)">
            <summary>
            Assembles <see cref="T:Nikki.Support.Shared.Class.PresetRide"/> into a byte array.
            </summary>
            <param name="bw"><see cref="T:System.IO.BinaryWriter"/> to write <see cref="T:Nikki.Support.Shared.Class.PresetRide"/> with.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Class.PresetRide.Disassemble(System.IO.BinaryReader)">
            <summary>
            Disassembles array into <see cref="T:Nikki.Support.Shared.Class.PresetRide"/> properties.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read <see cref="T:Nikki.Support.Shared.Class.PresetRide"/> with.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Class.PresetRide.StringToKey(Nikki.Support.Shared.Parts.PresetParts.Concatenator)">
            <summary>
            Converts all preset parts into binary memory keys.
            </summary>
            <param name="parts"><see cref="T:Nikki.Support.Shared.Parts.PresetParts.Concatenator"/> class of all preset ride's parts.</param>
            <returns>Sorted array of all preset parts hashes.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.PresetRide.MemoryCast(System.String)">
            <summary>
            Casts all attributes from this object to another one.
            </summary>
            <param name="CName">CollectionName of the new created object.</param>
            <returns>Memory casted copy of the object.</returns>
        </member>
        <member name="T:Nikki.Support.Shared.Class.PresetSkin">
            <summary>
            <see cref="T:Nikki.Support.Shared.Class.PresetSkin"/> is a collection of settings related to car skins.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.PresetSkin.CollectionName">
            <summary>
            Collection name of the variable.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.PresetSkin.GameINT">
            <summary>
            Game to which the class belongs to.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.PresetSkin.GameSTR">
            <summary>
            Game string to which the class belongs to.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.PresetSkin.BinKey">
            <summary>
            Binary memory hash of the collection name.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.PresetSkin.VltKey">
            <summary>
            Vault memory hash of the collection name.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.PresetSkin.PaintType">
            <summary>
            Paint type value of the preset skin.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.PresetSkin.PaintSwatch">
            <summary>
            Gradient color value of the paint of the preset skin. Range: 0-90.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.PresetSkin.PaintSaturation">
            <summary>
            Saturation value of the paint of the preset skin. Range: (float)0-1.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.PresetSkin.PaintBrightness">
            <summary>
            Brightness value of the paint of the preset skin. Range: (float)0-1.
            </summary>
        </member>
        <member name="M:Nikki.Support.Shared.Class.PresetSkin.Assemble(System.IO.BinaryWriter)">
            <summary>
            Assembles <see cref="T:Nikki.Support.Shared.Class.PresetSkin"/> into a byte array.
            </summary>
            <param name="bw"><see cref="T:System.IO.BinaryWriter"/> to write <see cref="T:Nikki.Support.Shared.Class.PresetSkin"/> with.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Class.PresetSkin.Disassemble(System.IO.BinaryReader)">
            <summary>
            Disassembles array into <see cref="T:Nikki.Support.Shared.Class.PresetSkin"/> properties.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read <see cref="T:Nikki.Support.Shared.Class.PresetSkin"/> with.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Class.PresetSkin.MemoryCast(System.String)">
            <summary>
            Casts all attributes from this object to another one.
            </summary>
            <param name="CName">CollectionName of the new created object.</param>
            <returns>Memory casted copy of the object.</returns>
        </member>
        <member name="T:Nikki.Support.Shared.Class.STRBlock">
            <summary>
            <see cref="T:Nikki.Support.Shared.Class.STRBlock"/> is a collection of language strings, hashes and labels.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.STRBlock.CollectionName">
            <summary>
            Collection name of the variable.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.STRBlock.GameINT">
            <summary>
            Game to which the class belongs to.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.STRBlock.GameSTR">
            <summary>
            Game string to which the class belongs to.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.STRBlock.BinKey">
            <summary>
            Binary memory hash of the collection name.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.STRBlock.VltKey">
            <summary>
            Vault memory hash of the collection name.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.STRBlock.InfoLength">
            <summary>
            Length of the string information array.
            </summary>
        </member>
        <member name="M:Nikki.Support.Shared.Class.STRBlock.MemoryCast(System.String)">
            <summary>
            Casts all attributes from this object to another one.
            </summary>
            <param name="CName">CollectionName of the new created object.</param>
            <returns>Memory casted copy of the object.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.STRBlock.Assemble(System.IO.BinaryWriter)">
            <summary>
            Assembles <see cref="T:Nikki.Support.Shared.Class.STRBlock"/> into a byte array.
            </summary>
            <param name="bw"><see cref="T:System.IO.BinaryWriter"/> to write <see cref="T:Nikki.Support.Shared.Class.STRBlock"/> with.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Class.STRBlock.Disassemble(System.IO.BinaryReader)">
            <summary>
            Disassembles array into <see cref="T:Nikki.Support.Shared.Class.STRBlock"/> properties.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read <see cref="T:Nikki.Support.Shared.Class.STRBlock"/> with.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Class.STRBlock.DisperseLabels(System.IO.BinaryReader)">
            <summary>
            Disassembles labels block array into separate properties.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read labels with.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Class.STRBlock.ParseLabels(System.IO.BinaryWriter)">
            <summary>
            Assembles and writes labels as a byte array.
            </summary>
            <param name="bw"><see cref="T:System.IO.BinaryWriter"/> to write labels with.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Class.STRBlock.GetRecord(System.UInt32)">
            <summary>
            Gets the <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/> from the internal list.
            </summary>
            <param name="key">Key of the <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/> to find.</param>
            <returns>StringRecord is it exists; otherwise null;</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.STRBlock.GetRecord(System.String)">
            <summary>
            Gets the <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/> from the internal list.
            </summary>
            <param name="key">Key of the <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/> to find.</param>
            <returns>StringRecord is it exists; otherwise null;</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.STRBlock.GetRecords">
            <summary>
            Gets all <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/> stored in <see cref="T:Nikki.Support.Shared.Class.STRBlock"/>.
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/>.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.STRBlock.GetText(System.UInt32)">
            <summary>
            Gets text from the binary key of a label provided.
            </summary>
            <param name="key">Key of the string label.</param>
            <returns>Text of the label as a string.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.STRBlock.GetText(System.String)">
            <summary>
            Gets text from the binary key of a label provided.
            </summary>
            <param name="key">Key of the string label.</param>
            <returns>Text of the label as a string.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.STRBlock.TryAddRecord(System.String,System.String,System.String)">
            <summary>
            Attempts to add <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/> in the <see cref="T:Nikki.Support.Shared.Class.STRBlock"/>.
            </summary>
            <param name="key">Key of the new <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/></param>
            <param name="label">Label of the new <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/></param>
            <param name="text">Text of the new <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/></param>
            <returns>True if adding was successful; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.STRBlock.TryAddRecord(System.String,System.String,System.String,System.String@)">
            <summary>
            Attempts to add <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/> in the <see cref="T:Nikki.Support.Shared.Class.STRBlock"/>.
            </summary>
            <param name="key">Key of the new <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/></param>
            <param name="label">Label of the new <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/></param>
            <param name="text">Text of the new <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/></param>
            <param name="error">Error occured when trying to add the record.</param>
            <returns>True if adding was successful; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.STRBlock.TryRemoveRecord(System.UInt32)">
            <summary>
            Attempts to remove <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/> with the key provided.
            </summary>
            <param name="key">Key of the <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/> to be removed.</param>
            <returns>True if removing was successful; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.STRBlock.TryRemoveRecord(System.String)">
            <summary>
            Attempts to remove <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/> with the key provided.
            </summary>
            <param name="key">Key of the <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/> to be removed.</param>
            <returns>True if removing was successful; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.STRBlock.TryRemoveRecord(System.UInt32,System.String@)">
            <summary>
            Attempts to remove <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/> with the key provided.
            </summary>
            <param name="key">Key of the <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/> to be removed.</param>
            <param name="error">Error occured when trying to remove the record.</param>
            <returns>True if removing was successful; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.STRBlock.TryRemoveRecord(System.String,System.String@)">
            <summary>
            Attempts to remove <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/> with the key provided.
            </summary>
            <param name="key">Key of the <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/> to be removed.</param>
            <param name="error">Error occured when trying to remove the record.</param>
            <returns>True if removing was successful; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.STRBlock.FindWithText(System.String)">
            <summary>
            Retrieves all <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/> that have their texts containing text provided.
            </summary>
            <param name="text">Text that other <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/> should match.</param>
            <returns>Enumerable of records containing text provided.</returns>
        </member>
        <member name="T:Nikki.Support.Shared.Class.SunInfo">
            <summary>
            <see cref="T:Nikki.Support.Shared.Class.SunInfo"/> is a collection of sun and daylight settings.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.SunInfo.CollectionName">
            <summary>
            Collection name of the variable.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.SunInfo.GameINT">
            <summary>
            Game to which the class belongs to.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.SunInfo.GameSTR">
            <summary>
            Game string to which the class belongs to.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.SunInfo.BinKey">
            <summary>
            Binary memory hash of the collection name.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.SunInfo.VltKey">
            <summary>
            Vault memory hash of the collection name.
            </summary>
        </member>
        <member name="M:Nikki.Support.Shared.Class.SunInfo.Assemble(System.IO.BinaryWriter)">
            <summary>
            Assembles <see cref="T:Nikki.Support.Shared.Class.SunInfo"/> into a byte array.
            </summary>
            <param name="bw"><see cref="T:System.IO.BinaryWriter"/> to write <see cref="T:Nikki.Support.Shared.Class.SunInfo"/> with.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Class.SunInfo.Disassemble(System.IO.BinaryReader)">
            <summary>
            Disassembles array into <see cref="T:Nikki.Support.Shared.Class.SunInfo"/> properties.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read <see cref="T:Nikki.Support.Shared.Class.SunInfo"/> with.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Class.SunInfo.MemoryCast(System.String)">
            <summary>
            Casts all attributes from this object to another one.
            </summary>
            <param name="CName">CollectionName of the new created object.</param>
            <returns>Memory casted copy of the object.</returns>
        </member>
        <member name="T:Nikki.Support.Shared.Class.Texture">
            <summary>
            <see cref="T:Nikki.Support.Shared.Class.Texture"/> is a collection of dds image data used by the game.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.Texture.CollectionName">
            <summary>
            Collection name of the variable.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.Texture.GameINT">
            <summary>
            Game to which the class belongs to.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.Texture.GameSTR">
            <summary>
            Game string to which the class belongs to.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.Texture.BinKey">
            <summary>
            Binary memory hash of the collection name.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.Texture.VltKey">
            <summary>
            Vault memory hash of the collection name.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.Texture.Offset">
            <summary>
            Represents data offset of the block in Global data.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.Texture.Size">
            <summary>
            Represents data size of the block in Global data.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.Texture.PaletteOffset">
            <summary>
            Represents palette offset of the block in Global data.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.Texture.PaletteSize">
            <summary>
            Represents palette size of the block in Global data.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.Texture.Compression">
            <summary>
            Gets compression type of the texture.
            </summary>
            <returns>Compression type as a string.</returns>
        </member>
        <member name="P:Nikki.Support.Shared.Class.Texture.Width">
            <summary>
            Represents height in pixels of the texture.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.Texture.Height">
            <summary>
            Represents height in pixels of the texture.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.Texture.Log_2_Width">
            <summary>
            Represents base 2 value of the width of the texture.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.Texture.Log_2_Height">
            <summary>
            Represents base 2 value of the height of the texture.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.Texture.Mipmaps">
            <summary>
            Represents number of mipmaps in the texture.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.Texture.MipmapBiasType">
            <summary>
            Represents mipmap bias type of the texture.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.Texture.TileableUV">
            <summary>
            Represents tileable level of the texture.
            </summary>
        </member>
        <member name="M:Nikki.Support.Shared.Class.Texture.Assemble(System.IO.BinaryWriter)">
            <summary>
            Assembles <see cref="T:Nikki.Support.Shared.Class.Texture"/> header into a byte array.
            </summary>
            <param name="bw"><see cref="T:System.IO.BinaryWriter"/> to write <see cref="T:Nikki.Support.Shared.Class.Texture"/> header with.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Class.Texture.Disassemble(System.IO.BinaryReader)">
            <summary>
            Disassembles array into <see cref="T:Nikki.Support.Shared.Class.Texture"/> header properties.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read <see cref="T:Nikki.Support.Shared.Class.Texture"/> header with.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Class.Texture.GetDDSArray">
            <summary>
            Gets .dds data along with the .dds header.
            </summary>
            <returns>.dds texture as a byte array.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.Texture.GetImage">
            <summary>
            Gets .png format image from .dds data.
            </summary>
            <returns>.png format image.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.Texture.Initialize(System.String)">
            <summary>
            Initializes all properties of the new <see cref="T:Nikki.Support.Shared.Class.Texture"/>.
            </summary>
            <param name="filename">Filename of the .dds texture passed.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Class.Texture.ReadData(System.IO.BinaryReader,System.Boolean)">
            <summary>
            Reads .dds data from the <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/>.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read data with.</param>
            <param name="forced">If forced, ignores internal offset and reads data 
            starting at the pointer passed.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Class.Texture.Reload(System.String)">
            <summary>
            Reloads <see cref="T:Nikki.Support.Shared.Class.Texture"/> properties based on the new file passed.
            </summary>
            <param name="filename">Filename of .dds texture passed.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Class.Texture.MemoryCast(System.String)">
            <summary>
            Casts all attributes from this object to another one.
            </summary>
            <param name="CName">CollectionName of the new created object.</param>
            <returns>Memory casted copy of the object.</returns>
        </member>
        <member name="T:Nikki.Support.Shared.Class.TPKBlock">
            <summary>
            <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/> is a collection of <see cref="T:Nikki.Support.Shared.Class.Texture"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.TPKBlock.Version">
            <summary>
            Version of this <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.TPKBlock.Filename">
            <summary>
            Filename of the <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/> which was assembled. Has no effect. 0x40 bytes.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.TPKBlock.FilenameHash">
            <summary>
            BinHash of the Filename property.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.TPKBlock.PermBlockByteOffset">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.TPKBlock.PermBlockByteSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.TPKBlock.EndianSwapped">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.TPKBlock.TexturePack">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.TPKBlock.TextureIndexEntryTable">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.TPKBlock.TextureStreamEntryTable">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.TPKBlock.IsCompressed">
            <summary>
            True if <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/> is compressed and should be saved 
            as compressed; false otherwise.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.TPKBlock.CollectionName">
            <summary>
            Collection name of the variable.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.TPKBlock.GameINT">
            <summary>
            Game to which the class belongs to.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.TPKBlock.GameSTR">
            <summary>
            Game string to which the class belongs to.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.TPKBlock.BinKey">
            <summary>
            Binary memory hash of the collection name.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.TPKBlock.VltKey">
            <summary>
            Vault memory hash of the collection name.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.TPKBlock.Index">
            <summary>
            Index of the <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/> in the Global data.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Class.TPKBlock.BelongsToFile">
            <summary>
            Filename to which <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/> belong to.
            </summary>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.MemoryCast(System.String)">
            <summary>
            Casts all attributes from this object to another one.
            </summary>
            <param name="CName">CollectionName of the new created object.</param>
            <returns>Memory casted copy of the object.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.GetTextures">
            <summary>
            Gets all textures of this <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/>.
            </summary>
            <returns>Textures as an object.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.SortTexturesByType(System.Boolean)">
            <summary>
            Sorts <see cref="T:Nikki.Support.Shared.Class.Texture"/> by their CollectionNames or BinKeys.
            </summary>
            <param name="by_name">True if sort by name; false is sort by hash.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.Assemble(System.IO.BinaryWriter)">
            <summary>
            Assembles <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/> into a byte array.
            </summary>
            <param name="bw"><see cref="T:System.IO.BinaryWriter"/> to write <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/> with.</param>
            <returns>Byte array of the tpk block.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.Disassemble(System.IO.BinaryReader)">
            <summary>
            Disassembles <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/> array into separate properties.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/> with.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.FindTexture(System.UInt32,Nikki.Reflection.Enum.eKeyType)">
            <summary>
            Tries to find <see cref="T:Nikki.Support.Shared.Class.Texture"/> based on the key passed.
            </summary>
            <param name="key">Key of the <see cref="T:Nikki.Support.Shared.Class.Texture"/> Collection Name.</param>
            <param name="type">Type of the key passed.</param>
            <returns>Texture if it is found; null otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.GetTextureIndex(System.UInt32,Nikki.Reflection.Enum.eKeyType)">
            <summary>
            Gets index of the <see cref="T:Nikki.Support.Shared.Class.Texture"/> in the <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/>.
            </summary>
            <param name="key">Key of the Collection Name of the <see cref="T:Nikki.Support.Shared.Class.Texture"/>.</param>
            <param name="type">Key type passed.</param>
            <returns>Index number as an integer. If element does not exist, returns -1.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.TryAddTexture(System.String,System.String)">
            <summary>
            Attempts to add <see cref="T:Nikki.Support.Shared.Class.Texture"/> to the <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/> data.
            </summary>
            <param name="CName">Collection Name of the new <see cref="T:Nikki.Support.Shared.Class.Texture"/>.</param>
            <param name="filename">Path of the texture to be imported.</param>
            <returns>True if texture adding was successful, false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.TryAddTexture(System.String,System.String,System.String@)">
            <summary>
            Attempts to add <see cref="T:Nikki.Support.Shared.Class.Texture"/> to the <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/> data.
            </summary>
            <param name="CName">Collection Name of the new <see cref="T:Nikki.Support.Shared.Class.Texture"/>.</param>
            <param name="filename">Path of the texture to be imported.</param>
            <param name="error">Error occured when trying to add a texture.</param>
            <returns>True if texture adding was successful, false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.TryRemoveTexture(System.UInt32,Nikki.Reflection.Enum.eKeyType)">
            <summary>
            Attempts to remove <see cref="T:Nikki.Support.Shared.Class.Texture"/> specified from <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/> data.
            </summary>
            <param name="key">Key of the Collection Name of the <see cref="T:Nikki.Support.Shared.Class.Texture"/> to be deleted.</param>
            <param name="type">Type fo the key passed.</param>
            <returns>True if texture removing was successful, false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.TryRemoveTexture(System.UInt32,Nikki.Reflection.Enum.eKeyType,System.String@)">
            <summary>
            Attempts to remove <see cref="T:Nikki.Support.Shared.Class.Texture"/> specified from <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/> data.
            </summary>
            <param name="key">Key of the Collection Name of the <see cref="T:Nikki.Support.Shared.Class.Texture"/> to be deleted.</param>
            <param name="type">Type of the key passed.</param>
            <param name="error">Error occured when trying to remove a texture.</param>
            <returns>True if texture removing was successful, false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.TryCloneTexture(System.String,System.UInt32,Nikki.Reflection.Enum.eKeyType)">
            <summary>
            Attempts to clone <see cref="T:Nikki.Support.Shared.Class.Texture"/> specified in the <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/> data.
            </summary>
            <param name="newname">Collection Name of the new <see cref="T:Nikki.Support.Shared.Class.Texture"/>.</param>
            <param name="key">Key of the Collection Name of the <see cref="T:Nikki.Support.Shared.Class.Texture"/> to clone.</param>
            <param name="type">Type of the key passed.</param>
            <returns>True if texture cloning was successful, false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.TryCloneTexture(System.String,System.UInt32,Nikki.Reflection.Enum.eKeyType,System.String@)">
            <summary>
            Attempts to clone <see cref="T:Nikki.Support.Shared.Class.Texture"/> specified in the <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/> data.
            </summary>
            <param name="newname">Collection Name of the new <see cref="T:Nikki.Support.Shared.Class.Texture"/>.</param>
            <param name="key">Key of the Collection Name of the <see cref="T:Nikki.Support.Shared.Class.Texture"/> to clone.</param>
            <param name="type">Type of the key passed.</param>
            <param name="error">Error occured when trying to clone a texture.</param>
            <returns>True if texture cloning was successful, false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.TryReplaceTexture(System.UInt32,Nikki.Reflection.Enum.eKeyType,System.String)">
            <summary>
            Attemps to replace <see cref="T:Nikki.Support.Shared.Class.Texture"/> specified in the <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/> data with a new one.
            </summary>
            <param name="key">Key of the Collection Name of the <see cref="T:Nikki.Support.Shared.Class.Texture"/> to be replaced.</param>
            <param name="type">Type of the key passed.</param>
            <param name="filename">Path of the texture that replaces the current one.</param>
            <returns>True if texture replacing was successful, false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.TryReplaceTexture(System.UInt32,Nikki.Reflection.Enum.eKeyType,System.String,System.String@)">
            <summary>
            Attemps to replace <see cref="T:Nikki.Support.Shared.Class.Texture"/> specified in the <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/> data with a new one.
            </summary>
            <param name="key">Key of the Collection Name of the <see cref="T:Nikki.Support.Shared.Class.Texture"/> to be replaced.</param>
            <param name="type">Type of the key passed.</param>
            <param name="filename">Path of the texture that replaces the current one.</param>
            <param name="error">Error occured when trying to replace a texture.</param>
            <returns>True if texture replacing was successful, false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.TryExportTexture(System.UInt32,Nikki.Reflection.Enum.eKeyType,System.String,System.String)">
            <summary>
            Attemps to export <see cref="T:Nikki.Support.Shared.Class.Texture"/> specified to the path and mode provided.
            </summary>
            <param name="key">Key of the Collection Name of the <see cref="T:Nikki.Support.Shared.Class.Texture"/> to be exported.</param>
            <param name="type">Type of the key passed.</param>
            <param name="path">Path where the texture should be exported.</param>
            <param name="mode">Mode in which export the texture. Range: ".dds", ".png", ".jpg", ".tiff", ".bmp".</param>
            <returns>True if texture export was successful, false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.TryExportTexture(System.UInt32,Nikki.Reflection.Enum.eKeyType,System.String,System.String,System.String@)">
            <summary>
            Attemps to export <see cref="T:Nikki.Support.Shared.Class.Texture"/> specified to the path and mode provided.
            </summary>
            <param name="key">Key of the Collection Name of the <see cref="T:Nikki.Support.Shared.Class.Texture"/> to be exported.</param>
            <param name="type">Type of the key passed.</param>
            <param name="path">Path where the texture should be exported.</param>
            <param name="mode">Mode in which export the texture. Range: ".dds", ".png", ".jpg", ".tiff", ".bmp".</param>
            <param name="error">Error occured when trying to clone a texture.</param>
            <returns>True if texture export was successful, false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.FindOffsets(System.IO.BinaryReader)">
            <summary>
            Finds offsets of all partials and its parts in the <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/>.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/> with.</param>
            <returns>Array of all offsets.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.GetTextureCount(System.IO.BinaryReader,System.Int32)">
            <summary>
            Gets amount of textures in the <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/>.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/> with.</param>
            <param name="offset">Partial 1 part2 offset in the tpk block array.</param>
            <returns>Number of textures in the tpk block.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.GetHeaderInfo(System.IO.BinaryReader,System.Int32)">
            <summary>
            Gets <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/> header information.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/> with.</param>
            <param name="offset">Partial 1 part1 offset in the tpk block array.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.GetKeyList(System.IO.BinaryReader,System.Int32)">
            <summary>
            Gets list of keys of the textures in the <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/>.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/> with.</param>
            <param name="offset">Partial 1 part2 offset in the tpk block array.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.GetOffsetSlots(System.IO.BinaryReader,System.Int32)">
            <summary>
            Gets list of offset slots of the textures in the <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/>.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/> with.</param>
            <param name="offset">Partial 1 part3 offset in the tpk block array.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.GetCompressionList(System.IO.BinaryReader,System.Int32)">
            <summary>
            Gets list of compressions of the textures in the <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/>.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/> with.</param>
            <param name="offset">Partial 1 part5 offset in the tpk block array.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.GetTextureHeaders(System.IO.BinaryReader,System.Int32)">
            <summary>
            Gets list of offsets and sizes of the texture headers in the <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/>.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/> with.</param>
            <param name="offset">Partial 1 part4 offset in the tpk block array.</param>
            <returns>Array of offsets and sizes of texture headers.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.ParseCompTexture(System.IO.BinaryReader,Nikki.Support.Shared.Parts.TPKParts.OffSlot)">
            <summary>
            Parses compressed texture and returns it on the output.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/> with.</param>
            <param name="offslot">Offslot of the texture to be parsed</param>
            <returns>Decompressed texture valid to the current support.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.TextureSort">
            <summary>
            Sorts textures by their binary memory hashes.
            </summary>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.CheckKeys">
            <summary>
            Checks texture keys and tpk keys for matching.
            </summary>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.CheckComps">
            <summary>
            Checks texture compressions and tpk compressions for matching.
            </summary>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.Get1Part1(System.IO.BinaryWriter)">
            <summary>
            Assembles partial 1 part1 of the tpk block.
            </summary>
            <param name="bw"><see cref="T:System.IO.BinaryWriter"/> to write data with.</param>
            <returns>Byte array of the partial 1 part1.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.Get1Part2(System.IO.BinaryWriter)">
            <summary>
            Assembles partial 1 part2 of the tpk block.
            </summary>
            <param name="bw"><see cref="T:System.IO.BinaryWriter"/> to write data with.</param>
            <returns>Byte array of the partial 1 part2.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.Get1Part4(System.IO.BinaryWriter)">
            <summary>
            Assembles partial 1 part4 of the tpk block.
            </summary>
            <param name="bw"><see cref="T:System.IO.BinaryWriter"/> to write data with.</param>
            <returns>Byte array of the partial 1 part4.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.Get1Part5(System.IO.BinaryWriter)">
            <summary>
            Assembles partial 1 part5 of the tpk block.
            </summary>
            <param name="bw"><see cref="T:System.IO.BinaryWriter"/> to write data with.</param>
            <returns>Byte array of the partial 1 part5.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.Get2Part1(System.IO.BinaryWriter)">
            <summary>
            Assembles partial 2 part1 of the tpk block.
            </summary>
            <param name="bw"><see cref="T:System.IO.BinaryWriter"/> to write data with.</param>
            <returns>Byte array of the partial 2 part1.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Class.TPKBlock.Get2Part2(System.IO.BinaryWriter)">
            <summary>
            Assembles partial 2 part2 of the tpk block.
            </summary>
            <param name="bw"><see cref="T:System.IO.BinaryWriter"/> to write data with.</param>
            <returns>Byte array of the partial 2 part2.</returns>
        </member>
        <member name="T:Nikki.Support.Shared.Parts.CarParts.BoolAttribute">
            <summary>
            A <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPAttribute"/> with 4-byte boolean value.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.CarParts.BoolAttribute.AttribType">
            <summary>
            <see cref="T:Nikki.Reflection.Enum.eCarPartAttribType"/> type of this <see cref="T:Nikki.Support.Shared.Parts.CarParts.BoolAttribute"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.CarParts.BoolAttribute.Value">
            <summary>
            Attribute value.
            </summary>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.BoolAttribute.#ctor">
            <summary>
            Initializes new instance of <see cref="T:Nikki.Support.Shared.Parts.CarParts.BoolAttribute"/>.
            </summary>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.BoolAttribute.#ctor(System.IO.BinaryReader,System.UInt32)">
            <summary>
            Initializes new instance of <see cref="T:Nikki.Support.Shared.Parts.CarParts.BoolAttribute"/> by reading data using 
            <see cref="T:System.IO.BinaryReader"/> provided.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read with.</param>
            <param name="key">Key of the attribute's group.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.BoolAttribute.Disassemble(System.IO.BinaryReader,System.IO.BinaryReader)">
            <summary>
            Disassembles byte array into <see cref="T:Nikki.Support.Shared.Parts.CarParts.BoolAttribute"/> using <see cref="T:System.IO.BinaryReader"/> 
            provided.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read with.</param>
            <param name="str_reader"><see cref="T:System.IO.BinaryReader"/> to read strings with. 
            Since it is an Integer Attribute, this value can be <see langword="null"/>.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.BoolAttribute.Assemble(System.IO.BinaryWriter,System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Assembles <see cref="T:Nikki.Support.Shared.Parts.CarParts.BoolAttribute"/> and writes it using <see cref="T:System.IO.BinaryWriter"/> 
            provided.
            </summary>
            <param name="bw"><see cref="T:System.IO.BinaryWriter"/> to write with.</param>
            <param name="string_dict">Dictionary of string HashCodes and their offsets. 
            Since it is an Boolean Attribute, this value can be <see langword="null"/>.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.BoolAttribute.ToString">
            <summary>
            Returns attribute part label and its type as a string value.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.BoolAttribute.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object, which must also be a
            <see cref="T:Nikki.Support.Shared.Parts.CarParts.BoolAttribute"/> object, have the same value.
            </summary>
            <param name="obj">The <see cref="T:Nikki.Support.Shared.Parts.CarParts.BoolAttribute"/> to compare to this instance.</param>
            <returns>True if obj is a <see cref="T:Nikki.Support.Shared.Parts.CarParts.BoolAttribute"/> and its value is the same as 
            this instance; false otherwise. If obj is null, the method returns false.
            </returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.BoolAttribute.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Nikki.Support.Shared.Parts.CarParts.BoolAttribute"/>.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.BoolAttribute.op_Equality(Nikki.Support.Shared.Parts.CarParts.BoolAttribute,Nikki.Support.Shared.Parts.CarParts.BoolAttribute)">
            <summary>
            Determines whether two specified <see cref="T:Nikki.Support.Shared.Parts.CarParts.BoolAttribute"/> have the same value.
            </summary>
            <param name="at1">The first <see cref="T:Nikki.Support.Shared.Parts.CarParts.BoolAttribute"/> to compare, or null.</param>
            <param name="at2">The second <see cref="T:Nikki.Support.Shared.Parts.CarParts.BoolAttribute"/> to compare, or null.</param>
            <returns>True if the value of c1 is the same as the value of c2; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.BoolAttribute.op_Inequality(Nikki.Support.Shared.Parts.CarParts.BoolAttribute,Nikki.Support.Shared.Parts.CarParts.BoolAttribute)">
            <summary>
            Determines whether two specified <see cref="T:Nikki.Support.Shared.Parts.CarParts.BoolAttribute"/> have different values.
            </summary>
            <param name="at1">The first <see cref="T:Nikki.Support.Shared.Parts.CarParts.BoolAttribute"/> to compare, or null.</param>
            <param name="at2">The second <see cref="T:Nikki.Support.Shared.Parts.CarParts.BoolAttribute"/> to compare, or null.</param>
            <returns>True if the value of c1 is different from the value of c2; false otherwise.</returns>
        </member>
        <member name="T:Nikki.Support.Shared.Parts.CarParts.CPAttribute">
            <summary>
            A <see cref="T:Nikki.Support.Shared.Class.DBModelPart"/> unit attribute.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.CarParts.CPAttribute.AttribType">
            <summary>
            <see cref="T:Nikki.Reflection.Enum.eCarPartAttribType"/> type of this <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPAttribute"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.CarParts.CPAttribute.Part">
            <summary>
            Name of the part to which this <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPAttribute"/> belongs to.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.CarParts.CPAttribute.Key">
            <summary>
            Key of the part to which this <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPAttribute"/> belongs to.
            </summary>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.CPAttribute.Disassemble(System.IO.BinaryReader,System.IO.BinaryReader)">
            <summary>
            Disassembles byte array into <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPAttribute"/> using <see cref="T:System.IO.BinaryReader"/> 
            provided.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read with.</param>
            <param name="str_reader"><see cref="T:System.IO.BinaryReader"/> to read strings with.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.CPAttribute.Assemble(System.IO.BinaryWriter,System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Assembles <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPAttribute"/> and writes it using <see cref="T:System.IO.BinaryWriter"/> 
            provided.
            </summary>
            <param name="bw"><see cref="T:System.IO.BinaryWriter"/> to write with.</param>
            <param name="string_dict">Dictionary of string HashCodes and their offsets.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.CPAttribute.ToString">
            <summary>
            Returns attribute part label and its type as a string value.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="T:Nikki.Support.Shared.Parts.CarParts.CPOffset">
            <summary>
            A <see cref="T:Nikki.Support.Shared.Class.DBModelPart"/> unit CarPart attribute offset class.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.CarParts.CPOffset.Offset">
            <summary>
            Offset of this <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPOffset"/> in the <see cref="T:Nikki.Support.Shared.Class.DBModelPart"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.CarParts.CPOffset.AttribOffsets">
            <summary>
            List of offsets in that this <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPOffset"/> contains.
            </summary>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.CPOffset.#ctor">
            <summary>
            Initializes new instance of <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPOffset"/>.
            </summary>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.CPOffset.#ctor(System.Int32)">
            <summary>
            Initializes new instance of <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPOffset"/>.
            </summary>
            <param name="length">Initial capacity of internal offset list.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.CPOffset.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes new instance of <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPOffset"/>.
            </summary>
            <param name="length">Initial capacity of internal offset list.</param>
            <param name="offset">Offset of this <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPOffset"/> in <see cref="T:Nikki.Support.Shared.Class.DBModelPart"/>.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.CPOffset.ToString">
            <summary>
            Returns attribute count as a string value.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.CPOffset.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object, which must also be a
            <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPOffset"/> object, have the same value.
            </summary>
            <param name="obj">The <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPOffset"/> to compare to this instance.</param>
            <returns>True if obj is a <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPOffset"/> and its value is the same as 
            this instance; false otherwise. If obj is null, the method returns false.
            </returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.CPOffset.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPOffset"/>.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.CPOffset.op_Equality(Nikki.Support.Shared.Parts.CarParts.CPOffset,Nikki.Support.Shared.Parts.CarParts.CPOffset)">
            <summary>
            Determines whether two specified <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPOffset"/> have the same value.
            </summary>
            <param name="off1">The first <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPOffset"/> to compare, or null.</param>
            <param name="off2">The second <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPOffset"/> to compare, or null.</param>
            <returns>True if the value of c1 is the same as the value of c2; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.CPOffset.op_Inequality(Nikki.Support.Shared.Parts.CarParts.CPOffset,Nikki.Support.Shared.Parts.CarParts.CPOffset)">
            <summary>
            Determines whether two specified <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPOffset"/> have different values.
            </summary>
            <param name="off1">The first <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPOffset"/> to compare, or null.</param>
            <param name="off2">The second <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPOffset"/> to compare, or null.</param>
            <returns>True if the value of c1 is different from the value of c2; false otherwise.</returns>
        </member>
        <member name="T:Nikki.Support.Shared.Parts.CarParts.CPStruct">
            <summary>
            A unit <see cref="T:Nikki.Support.Shared.Parts.CarParts.RealCarPart"/> struct with geometry part names.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.CarParts.CPStruct.Exists">
            <summary>
            Indicates whether this struct should exist in the database or not.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.CarParts.CPStruct.Templated">
            <summary>
            If true, all names are places in the string block; otherwise, all 
            hashes of the names are stored in the table.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.CarParts.CPStruct.Concatenator">
            <summary>
            Main concatenator string, if exists.
            </summary>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.CPStruct.Disassemble(System.IO.BinaryReader,System.IO.BinaryReader)">
            <summary>
            Disassembles byte array into <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPStruct"/> using <see cref="T:System.IO.BinaryReader"/> 
            provided.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read with.</param>
            <param name="str_reader"><see cref="T:System.IO.BinaryReader"/> to read strings with.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.CPStruct.Assemble(System.IO.BinaryWriter,System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Assembles <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPStruct"/> and writes it using <see cref="T:System.IO.BinaryWriter"/> 
            provided.
            </summary>
            <param name="bw"><see cref="T:System.IO.BinaryWriter"/> to write with.</param>
            <param name="string_dict">Dictionary with string HashCodes and their offsets.</param>
        </member>
        <member name="T:Nikki.Support.Shared.Parts.CarParts.FloatAttribute">
            <summary>
            A <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPAttribute"/> with 4-byte floating point value.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.CarParts.FloatAttribute.AttribType">
            <summary>
            <see cref="T:Nikki.Reflection.Enum.eCarPartAttribType"/> type of this <see cref="T:Nikki.Support.Shared.Parts.CarParts.FloatAttribute"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.CarParts.FloatAttribute.Value">
            <summary>
            Attribute value.
            </summary>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.FloatAttribute.#ctor">
            <summary>
            Initializes new instance of <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPAttribute"/>.
            </summary>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.FloatAttribute.#ctor(System.IO.BinaryReader,System.UInt32)">
            <summary>
            Initializes new instance of <see cref="T:Nikki.Support.Shared.Parts.CarParts.FloatAttribute"/> by reading data using 
            <see cref="T:System.IO.BinaryReader"/> provided.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read with.</param>
            <param name="key">Key of the attribute's group.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.FloatAttribute.Disassemble(System.IO.BinaryReader,System.IO.BinaryReader)">
            <summary>
            Disassembles byte array into <see cref="T:Nikki.Support.Shared.Parts.CarParts.FloatAttribute"/> using <see cref="T:System.IO.BinaryReader"/>  
            provided.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read with.</param>
            <param name="str_reader"><see cref="T:System.IO.BinaryReader"/> to read strings with. 
            Since it is a Floating Attribute, this value can be <see langword="null"/>.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.FloatAttribute.Assemble(System.IO.BinaryWriter,System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Assembles <see cref="T:Nikki.Support.Shared.Parts.CarParts.FloatAttribute"/> and writes it using <see cref="T:System.IO.BinaryWriter"/> 
            provided.
            </summary>
            <param name="bw"><see cref="T:System.IO.BinaryWriter"/> to write with.</param>
            <param name="string_dict">Dictionary of string HashCodes and their offsets. 
            Since it is a Floating Attribute, this value can be <see langword="null"/>.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.FloatAttribute.ToString">
            <summary>
            Returns attribute part label and its type as a string value.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.FloatAttribute.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object, which must also be a
            <see cref="T:Nikki.Support.Shared.Parts.CarParts.FloatAttribute"/> object, have the same value.
            </summary>
            <param name="obj">The <see cref="T:Nikki.Support.Shared.Parts.CarParts.FloatAttribute"/> to compare to this instance.</param>
            <returns>True if obj is a <see cref="T:Nikki.Support.Shared.Parts.CarParts.FloatAttribute"/> and its value is the same as 
            this instance; false otherwise. If obj is null, the method returns false.
            </returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.FloatAttribute.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Nikki.Support.Shared.Parts.CarParts.FloatAttribute"/>.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.FloatAttribute.op_Equality(Nikki.Support.Shared.Parts.CarParts.FloatAttribute,Nikki.Support.Shared.Parts.CarParts.FloatAttribute)">
            <summary>
            Determines whether two specified <see cref="T:Nikki.Support.Shared.Parts.CarParts.FloatAttribute"/> have the same value.
            </summary>
            <param name="at1">The first <see cref="T:Nikki.Support.Shared.Parts.CarParts.FloatAttribute"/> to compare, or null.</param>
            <param name="at2">The second <see cref="T:Nikki.Support.Shared.Parts.CarParts.FloatAttribute"/> to compare, or null.</param>
            <returns>True if the value of c1 is the same as the value of c2; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.FloatAttribute.op_Inequality(Nikki.Support.Shared.Parts.CarParts.FloatAttribute,Nikki.Support.Shared.Parts.CarParts.FloatAttribute)">
            <summary>
            Determines whether two specified <see cref="T:Nikki.Support.Shared.Parts.CarParts.FloatAttribute"/> have different values.
            </summary>
            <param name="at1">The first <see cref="T:Nikki.Support.Shared.Parts.CarParts.FloatAttribute"/> to compare, or null.</param>
            <param name="at2">The second <see cref="T:Nikki.Support.Shared.Parts.CarParts.FloatAttribute"/> to compare, or null.</param>
            <returns>True if the value of c1 is different from the value of c2; false otherwise.</returns>
        </member>
        <member name="T:Nikki.Support.Shared.Parts.CarParts.IntAttribute">
            <summary>
            A <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPAttribute"/> with 4-byte signed integer value.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.CarParts.IntAttribute.AttribType">
            <summary>
            <see cref="T:Nikki.Reflection.Enum.eCarPartAttribType"/> type of this <see cref="T:Nikki.Support.Shared.Parts.CarParts.IntAttribute"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.CarParts.IntAttribute.Value">
            <summary>
            Attribute value.
            </summary>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.IntAttribute.#ctor">
            <summary>
            Initializes new instance of <see cref="T:Nikki.Support.Shared.Parts.CarParts.IntAttribute"/>.
            </summary>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.IntAttribute.#ctor(System.IO.BinaryReader,System.UInt32)">
            <summary>
            Initializes new instance of <see cref="T:Nikki.Support.Shared.Parts.CarParts.IntAttribute"/> by reading data using 
            <see cref="T:System.IO.BinaryReader"/> provided.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read with.</param>
            <param name="key">Key of the attribute's group.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.IntAttribute.Disassemble(System.IO.BinaryReader,System.IO.BinaryReader)">
            <summary>
            Disassembles byte array into <see cref="T:Nikki.Support.Shared.Parts.CarParts.IntAttribute"/> using <see cref="T:System.IO.BinaryReader"/> 
            provided.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read with.</param>
            <param name="str_reader"><see cref="T:System.IO.BinaryReader"/> to read strings with. 
            Since it is an Integer Attribute, this value can be <see langword="null"/>.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.IntAttribute.Assemble(System.IO.BinaryWriter,System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Assembles <see cref="T:Nikki.Support.Shared.Parts.CarParts.IntAttribute"/> and writes it using <see cref="T:System.IO.BinaryWriter"/> 
            provided.
            </summary>
            <param name="bw"><see cref="T:System.IO.BinaryWriter"/> to write with.</param>
            <param name="string_dict">Dictionary of string HashCodes and their offsets. 
            Since it is an Integer Attribute, this value can be <see langword="null"/>.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.IntAttribute.ToString">
            <summary>
            Returns attribute part label and its type as a string value.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.IntAttribute.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object, which must also be a
            <see cref="T:Nikki.Support.Shared.Parts.CarParts.IntAttribute"/> object, have the same value.
            </summary>
            <param name="obj">The <see cref="T:Nikki.Support.Shared.Parts.CarParts.IntAttribute"/> to compare to this instance.</param>
            <returns>True if obj is a <see cref="T:Nikki.Support.Shared.Parts.CarParts.IntAttribute"/> and its value is the same as 
            this instance; false otherwise. If obj is null, the method returns false.
            </returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.IntAttribute.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Nikki.Support.Shared.Parts.CarParts.IntAttribute"/>.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.IntAttribute.op_Equality(Nikki.Support.Shared.Parts.CarParts.IntAttribute,Nikki.Support.Shared.Parts.CarParts.IntAttribute)">
            <summary>
            Determines whether two specified <see cref="T:Nikki.Support.Shared.Parts.CarParts.IntAttribute"/> have the same value.
            </summary>
            <param name="at1">The first <see cref="T:Nikki.Support.Shared.Parts.CarParts.IntAttribute"/> to compare, or null.</param>
            <param name="at2">The second <see cref="T:Nikki.Support.Shared.Parts.CarParts.IntAttribute"/> to compare, or null.</param>
            <returns>True if the value of c1 is the same as the value of c2; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.IntAttribute.op_Inequality(Nikki.Support.Shared.Parts.CarParts.IntAttribute,Nikki.Support.Shared.Parts.CarParts.IntAttribute)">
            <summary>
            Determines whether two specified <see cref="T:Nikki.Support.Shared.Parts.CarParts.IntAttribute"/> have different values.
            </summary>
            <param name="at1">The first <see cref="T:Nikki.Support.Shared.Parts.CarParts.IntAttribute"/> to compare, or null.</param>
            <param name="at2">The second <see cref="T:Nikki.Support.Shared.Parts.CarParts.IntAttribute"/> to compare, or null.</param>
            <returns>True if the value of c1 is different from the value of c2; false otherwise.</returns>
        </member>
        <member name="T:Nikki.Support.Shared.Parts.CarParts.PartIDAttribute">
            <summary>
            A <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPAttribute"/> with unknown byte and part ID values.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.CarParts.PartIDAttribute.AttribType">
            <summary>
            <see cref="T:Nikki.Reflection.Enum.eCarPartAttribType"/> type of this <see cref="T:Nikki.Support.Shared.Parts.CarParts.PartIDAttribute"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.CarParts.PartIDAttribute.Unknown">
            <summary>
            Unknown byte value.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.CarParts.PartIDAttribute.ID">
            <summary>
            Part ID of this <see cref="T:Nikki.Support.Shared.Parts.CarParts.PartIDAttribute"/>.
            </summary>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.PartIDAttribute.#ctor">
            <summary>
            Initializes new instance of <see cref="T:Nikki.Support.Shared.Parts.CarParts.PartIDAttribute"/>.
            </summary>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.PartIDAttribute.#ctor(System.IO.BinaryReader,System.UInt32)">
            <summary>
            Initializes new instance of <see cref="T:Nikki.Support.Shared.Parts.CarParts.PartIDAttribute"/> by reading data using 
            <see cref="T:System.IO.BinaryReader"/> provided.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read with.</param>
            <param name="key">Key of the attribute's group.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.PartIDAttribute.Disassemble(System.IO.BinaryReader,System.IO.BinaryReader)">
            <summary>
            Disassembles byte array into <see cref="T:Nikki.Support.Shared.Parts.CarParts.PartIDAttribute"/> using <see cref="T:System.IO.BinaryReader"/> 
            provided.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read with.</param>
            <param name="str_reader"><see cref="T:System.IO.BinaryReader"/> to read strings with. 
            Since it is an Integer Attribute, this value can be <see langword="null"/>.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.PartIDAttribute.Assemble(System.IO.BinaryWriter,System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Assembles <see cref="T:Nikki.Support.Shared.Parts.CarParts.PartIDAttribute"/> and writes it using <see cref="T:System.IO.BinaryWriter"/> 
            provided.
            </summary>
            <param name="bw"><see cref="T:System.IO.BinaryWriter"/> to write with.</param>
            <param name="string_dict">Dictionary of string HashCodes and their offsets. 
            Since it is an Integer Attribute, this value can be <see langword="null"/>.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.PartIDAttribute.ToString">
            <summary>
            Returns attribute part label and its type as a string value.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.PartIDAttribute.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object, which must also be a
            <see cref="T:Nikki.Support.Shared.Parts.CarParts.PartIDAttribute"/> object, have the same value.
            </summary>
            <param name="obj">The <see cref="T:Nikki.Support.Shared.Parts.CarParts.PartIDAttribute"/> to compare to this instance.</param>
            <returns>True if obj is a <see cref="T:Nikki.Support.Shared.Parts.CarParts.PartIDAttribute"/> and its value is the same as 
            this instance; false otherwise. If obj is null, the method returns false.
            </returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.PartIDAttribute.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Nikki.Support.Shared.Parts.CarParts.PartIDAttribute"/>.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.PartIDAttribute.op_Equality(Nikki.Support.Shared.Parts.CarParts.PartIDAttribute,Nikki.Support.Shared.Parts.CarParts.PartIDAttribute)">
            <summary>
            Determines whether two specified <see cref="T:Nikki.Support.Shared.Parts.CarParts.PartIDAttribute"/> have the same value.
            </summary>
            <param name="at1">The first <see cref="T:Nikki.Support.Shared.Parts.CarParts.PartIDAttribute"/> to compare, or null.</param>
            <param name="at2">The second <see cref="T:Nikki.Support.Shared.Parts.CarParts.PartIDAttribute"/> to compare, or null.</param>
            <returns>True if the value of c1 is the same as the value of c2; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.PartIDAttribute.op_Inequality(Nikki.Support.Shared.Parts.CarParts.PartIDAttribute,Nikki.Support.Shared.Parts.CarParts.PartIDAttribute)">
            <summary>
            Determines whether two specified <see cref="T:Nikki.Support.Shared.Parts.CarParts.PartIDAttribute"/> have different values.
            </summary>
            <param name="at1">The first <see cref="T:Nikki.Support.Shared.Parts.CarParts.PartIDAttribute"/> to compare, or null.</param>
            <param name="at2">The second <see cref="T:Nikki.Support.Shared.Parts.CarParts.PartIDAttribute"/> to compare, or null.</param>
            <returns>True if the value of c1 is different from the value of c2; false otherwise.</returns>
        </member>
        <member name="T:Nikki.Support.Shared.Parts.CarParts.RealCarPart">
            <summary>
            A unit CarPart attribute of <see cref="T:Nikki.Support.Shared.Class.DBModelPart"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.CarParts.RealCarPart.PartName">
            <summary>
            Name of this <see cref="T:Nikki.Support.Shared.Parts.CarParts.RealCarPart"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.CarParts.RealCarPart.Attributes">
            <summary>
            Collection of <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPAttribute"/> of this <see cref="T:Nikki.Support.Shared.Parts.CarParts.RealCarPart"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.CarParts.RealCarPart.Index">
            <summary>
            Index of <see cref="T:Nikki.Support.Shared.Class.DBModelPart"/> to which this part belongs to.
            </summary>
        </member>
        <member name="T:Nikki.Support.Shared.Parts.CarParts.StringAttribute">
            <summary>
            A <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPAttribute"/> with null-terminated string value.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.CarParts.StringAttribute.AttribType">
            <summary>
            <see cref="T:Nikki.Reflection.Enum.eCarPartAttribType"/> type of this <see cref="T:Nikki.Support.Shared.Parts.CarParts.StringAttribute"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.CarParts.StringAttribute.Value">
            <summary>
            Attribute value.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.CarParts.StringAttribute.ValueExists">
            <summary>
            Indicates whether value exists.
            </summary>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.StringAttribute.#ctor">
            <summary>
            Initializes new instance of <see cref="T:Nikki.Support.Shared.Parts.CarParts.StringAttribute"/>.
            </summary>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.StringAttribute.#ctor(System.IO.BinaryReader,System.IO.BinaryReader,System.UInt32)">
            <summary>
            Initializes new instance of <see cref="T:Nikki.Support.Shared.Parts.CarParts.StringAttribute"/> by reading data using 
            <see cref="T:System.IO.BinaryReader"/> provided.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read with.</param>
            <param name="str_reader"><see cref="T:System.IO.BinaryReader"/> to read strings with.</param>
            <param name="key">Key of the attribute's group.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.StringAttribute.Disassemble(System.IO.BinaryReader,System.IO.BinaryReader)">
            <summary>
            Disassembles byte array into <see cref="T:Nikki.Support.Shared.Parts.CarParts.StringAttribute"/> using <see cref="T:System.IO.BinaryReader"/> 
            provided.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read with.</param>
            <param name="str_reader"><see cref="T:System.IO.BinaryReader"/> to read strings with.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.StringAttribute.Assemble(System.IO.BinaryWriter,System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Assembles <see cref="T:Nikki.Support.Shared.Parts.CarParts.StringAttribute"/> and writes it using <see cref="T:System.IO.BinaryWriter"/> 
            provided.
            </summary>
            <param name="bw"><see cref="T:System.IO.BinaryWriter"/> to write with.</param>
            <param name="string_dict">Dictionary of string HashCodes and their offsets.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.StringAttribute.ToString">
            <summary>
            Returns attribute part label and its type as a string value.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.StringAttribute.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object, which must also be a
            <see cref="T:Nikki.Support.Shared.Parts.CarParts.StringAttribute"/> object, have the same value.
            </summary>
            <param name="obj">The <see cref="T:Nikki.Support.Shared.Parts.CarParts.StringAttribute"/> to compare to this instance.</param>
            <returns>True if obj is a <see cref="T:Nikki.Support.Shared.Parts.CarParts.StringAttribute"/> and its value is the same as 
            this instance; false otherwise. If obj is null, the method returns false.
            </returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.StringAttribute.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Nikki.Support.Shared.Parts.CarParts.StringAttribute"/>.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.StringAttribute.op_Equality(Nikki.Support.Shared.Parts.CarParts.StringAttribute,Nikki.Support.Shared.Parts.CarParts.StringAttribute)">
            <summary>
            Determines whether two specified <see cref="T:Nikki.Support.Shared.Parts.CarParts.StringAttribute"/> have the same value.
            </summary>
            <param name="at1">The first <see cref="T:Nikki.Support.Shared.Parts.CarParts.StringAttribute"/> to compare, or null.</param>
            <param name="at2">The second <see cref="T:Nikki.Support.Shared.Parts.CarParts.StringAttribute"/> to compare, or null.</param>
            <returns>True if the value of c1 is the same as the value of c2; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.StringAttribute.op_Inequality(Nikki.Support.Shared.Parts.CarParts.StringAttribute,Nikki.Support.Shared.Parts.CarParts.StringAttribute)">
            <summary>
            Determines whether two specified <see cref="T:Nikki.Support.Shared.Parts.CarParts.StringAttribute"/> have different values.
            </summary>
            <param name="at1">The first <see cref="T:Nikki.Support.Shared.Parts.CarParts.StringAttribute"/> to compare, or null.</param>
            <param name="at2">The second <see cref="T:Nikki.Support.Shared.Parts.CarParts.StringAttribute"/> to compare, or null.</param>
            <returns>True if the value of c1 is different from the value of c2; false otherwise.</returns>
        </member>
        <member name="T:Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute">
            <summary>
            A <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPAttribute"/> with two null-terminated string values.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute.AttribType">
            <summary>
            <see cref="T:Nikki.Reflection.Enum.eCarPartAttribType"/> type of this <see cref="T:Nikki.Support.Shared.Parts.CarParts.StringAttribute"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute.Value1">
            <summary>
            Attribute value 1.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute.Value2">
            <summary>
            Attribute value 2.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute.Value1Exists">
            <summary>
            Indicates whether value 1 exists.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute.Value2Exists">
            <summary>
            Indicates whether value 2 exists.
            </summary>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute.#ctor">
            <summary>
            Initializes new instance of <see cref="T:Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute"/>.
            </summary>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute.#ctor(System.IO.BinaryReader,System.IO.BinaryReader,System.UInt32)">
            <summary>
            Initializes new instance of <see cref="T:Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute"/> by reading data using 
            <see cref="T:System.IO.BinaryReader"/> provided.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read with.</param>
            <param name="str_reader"><see cref="T:System.IO.BinaryReader"/> to read strings with.</param>
            <param name="key">Key of the attribute's group.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute.Disassemble(System.IO.BinaryReader,System.IO.BinaryReader)">
            <summary>
            Disassembles byte array into <see cref="T:Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute"/> using <see cref="T:System.IO.BinaryReader"/> 
            provided.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read with.</param>
            <param name="str_reader"><see cref="T:System.IO.BinaryReader"/> to read strings with.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute.Assemble(System.IO.BinaryWriter,System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Assembles <see cref="T:Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute"/> and writes it using <see cref="T:System.IO.BinaryWriter"/> 
            provided.
            </summary>
            <param name="bw"><see cref="T:System.IO.BinaryWriter"/> to write with.</param>
            <param name="string_dict">Dictionary of string HashCodes and their offsets.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute.ToString">
            <summary>
            Returns attribute part label and its type as a string value.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object, which must also be a
            <see cref="T:Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute"/> object, have the same value.
            </summary>
            <param name="obj">The <see cref="T:Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute"/> to compare to this instance.</param>
            <returns>True if obj is a <see cref="T:Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute"/> and its value is the same as 
            this instance; false otherwise. If obj is null, the method returns false.
            </returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute"/>.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute.op_Equality(Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute,Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute)">
            <summary>
            Determines whether two specified <see cref="T:Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute"/> have the same value.
            </summary>
            <param name="at1">The first <see cref="T:Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute"/> to compare, or null.</param>
            <param name="at2">The second <see cref="T:Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute"/> to compare, or null.</param>
            <returns>True if the value of c1 is the same as the value of c2; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute.op_Inequality(Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute,Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute)">
            <summary>
            Determines whether two specified <see cref="T:Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute"/> have different values.
            </summary>
            <param name="at1">The first <see cref="T:Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute"/> to compare, or null.</param>
            <param name="at2">The second <see cref="T:Nikki.Support.Shared.Parts.CarParts.TwoStringAttribute"/> to compare, or null.</param>
            <returns>True if the value of c1 is different from the value of c2; false otherwise.</returns>
        </member>
        <member name="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor">
            <summary>
            <see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/> represents a single frontend group color.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.FNGParts.FEngColor.Red">
            <summary>
            Red value.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.FNGParts.FEngColor.Green">
            <summary>
            Green value.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.FNGParts.FEngColor.Blue">
            <summary>
            Blue value.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.FNGParts.FEngColor.Alpha">
            <summary>
            Alpha value.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.FNGParts.FEngColor.Offset">
            <summary>
            Offset of the <see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/> in its frontend group.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.FNGParts.FEngColor.ThisFNGroup">
            <summary>
            <see cref="T:Nikki.Support.Shared.Class.FNGroup"/> to which this <see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/> belongs to.
            </summary>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.FNGParts.FEngColor.#ctor(Nikki.Support.Shared.Class.FNGroup)">
            <summary>
            Initialize new instance of <see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/>.
            </summary>
            <param name="fng"><see cref="T:Nikki.Support.Shared.Class.FNGroup"/> to which this <see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/> belongs to.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.FNGParts.FEngColor.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object, which must also be a
            <see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/> object, have the same value.
            </summary>
            <param name="obj">The <see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/> to compare to this instance.</param>
            <returns>True if obj is a <see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/> and its value is the same as 
            this instance; false otherwise. If obj is null, the method returns false.
            </returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.FNGParts.FEngColor.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/>.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.FNGParts.FEngColor.op_Equality(Nikki.Support.Shared.Parts.FNGParts.FEngColor,Nikki.Support.Shared.Parts.FNGParts.FEngColor)">
            <summary>
            Determines whether two specified <see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/> have the same value.
            </summary>
            <param name="c1">The first <see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/> to compare, or null.</param>
            <param name="c2">The second <see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/> to compare, or null.</param>
            <returns>True if the value of c1 is the same as the value of c2; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.FNGParts.FEngColor.op_Inequality(Nikki.Support.Shared.Parts.FNGParts.FEngColor,Nikki.Support.Shared.Parts.FNGParts.FEngColor)">
            <summary>
            Determines whether two specified <see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/> have different values.
            </summary>
            <param name="c1">The first <see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/> to compare, or null.</param>
            <param name="c2">The second <see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/> to compare, or null.</param>
            <returns>True if the value of c1 is different from the value of c2; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.FNGParts.FEngColor.ToString">
            <summary>
            Returns offset and hex color representation of this <see cref="T:Nikki.Support.Shared.Parts.FNGParts.FEngColor"/> as a string.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="T:Nikki.Support.Shared.Parts.PresetParts.Add_On">
            <summary>
            Class with all addon strings that can be used to create labels for preset parts.
            </summary>
        </member>
        <member name="T:Nikki.Support.Shared.Parts.PresetParts.Concatenator">
            <summary>
            Class with strings to build labels for preset parts.
            </summary>
        </member>
        <member name="T:Nikki.Support.Shared.Parts.STRParts.StringRecord">
            <summary>
            Represents unit string record, which consists of key, label and text.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.STRParts.StringRecord.Key">
            <summary>
            Key of the label as a BinHash.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.STRParts.StringRecord.Label">
            <summary>
            Label of this <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.STRParts.StringRecord.Text">
            <summary>
            Text of this <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.STRParts.StringRecord.NulledLabelLength">
            <summary>
            Length of the label with null-termination.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.STRParts.StringRecord.NulledTextLength">
            <summary>
            Length of the text with null-termination.
            </summary>
        </member>
        <member name="F:Nikki.Support.Shared.Parts.STRParts.StringRecord.key">
            <summary>
            Constant string value "Key".
            </summary>
        </member>
        <member name="F:Nikki.Support.Shared.Parts.STRParts.StringRecord.label">
            <summary>
            Constant string value "Label".
            </summary>
        </member>
        <member name="F:Nikki.Support.Shared.Parts.STRParts.StringRecord.text">
            <summary>
            Constant string value "Text".
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.STRParts.StringRecord.ThisSTRBlock">
            <summary>
            <see cref="T:Nikki.Support.Shared.Class.STRBlock"/> to which this <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/> belongs to.
            </summary>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.STRParts.StringRecord.#ctor(Nikki.Support.Shared.Class.STRBlock)">
            <summary>
            Initializes new instance of <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/>.
            </summary>
            <param name="block"><see cref="T:Nikki.Support.Shared.Class.STRBlock"/> to which this 
            <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/> belongs to.</param>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.STRParts.StringRecord.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object, which must also be a
            <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/> object, have the same value.
            </summary>
            <param name="obj">The <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/> to compare to this instance.</param>
            <returns>True if obj is a <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/> and its value is the same as 
            this instance; false otherwise. If obj is null, the method returns false.
            </returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.STRParts.StringRecord.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/>.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.STRParts.StringRecord.op_Equality(Nikki.Support.Shared.Parts.STRParts.StringRecord,Nikki.Support.Shared.Parts.STRParts.StringRecord)">
            <summary>
            Determines whether two specified <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/> have the same value.
            </summary>
            <param name="s1">The first <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/> to compare, or null.</param>
            <param name="s2">The second <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/> to compare, or null.</param>
            <returns>True if the value of c1 is the same as the value of c2; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.STRParts.StringRecord.op_Inequality(Nikki.Support.Shared.Parts.STRParts.StringRecord,Nikki.Support.Shared.Parts.STRParts.StringRecord)">
            <summary>
            Determines whether two specified <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/> have different values.
            </summary>
            <param name="s1">The first <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/> to compare, or null.</param>
            <param name="s2">The second <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/> to compare, or null.</param>
            <returns>True if the value of c1 is different from the value of c2; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.STRParts.StringRecord.ToString">
            <summary>
            Returns key, label and text of this <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/> as a string.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.STRParts.StringRecord.TrySetValue(System.String,System.String)">
            <summary>
            Tries to set value provided at the <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/> property specified. 
            </summary>
            <param name="PropertyName">Property of the <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/>. Range: 
            Key, Label, Text.</param>
            <param name="value">Value to set.</param>
            <returns>True on success; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Shared.Parts.STRParts.StringRecord.TrySetValue(System.String,System.String,System.String@)">
            <summary>
            Tries to set value provided at the <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/> property specified. 
            </summary>
            <param name="PropertyName">Property of the <see cref="T:Nikki.Support.Shared.Parts.STRParts.StringRecord"/>. Range: 
            Key, Label, Text.</param>
            <param name="value">Value to set.</param>
            <param name="error">Error occured when trying to set value.</param>
            <returns>True on success; false otherwise.</returns>
        </member>
        <member name="T:Nikki.Support.Shared.Parts.TPKParts.CompSlot">
            <summary>
            Represents Compression slot of <see cref="T:Nikki.Support.Shared.Class.Texture"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.TPKParts.CompSlot.Var1">
            <summary>
            First compression setting.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.TPKParts.CompSlot.Var2">
            <summary>
            Second compression setting.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.TPKParts.CompSlot.Var3">
            <summary>
            Third compression setting.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.TPKParts.CompSlot.Comp">
            <summary>
            Compression of the <see cref="T:Nikki.Support.Shared.Class.Texture"/>.
            </summary>
        </member>
        <member name="T:Nikki.Support.Shared.Parts.TPKParts.OffSlot">
            <summary>
            Represents collection of <see cref="T:Nikki.Support.Shared.Class.Texture"/> in compressed <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.TPKParts.OffSlot.Key">
            <summary>
            Key of the <see cref="T:Nikki.Support.Shared.Class.Texture"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.TPKParts.OffSlot.AbsoluteOffset">
            <summary>
            Data offset relative to beginning of the <see cref="T:Nikki.Support.Shared.Class.TPKBlock"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.TPKParts.OffSlot.CompressedSize">
            <summary>
            Compressed data size.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.TPKParts.OffSlot.ActualSize">
            <summary>
            Decompressed data size.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.TPKParts.OffSlot.ToHeaderOffset">
            <summary>
            Data offset relative to this offslot.
            </summary>
        </member>
        <member name="P:Nikki.Support.Shared.Parts.TPKParts.OffSlot.UnknownInt32">
            <summary>
            Unknown 4-byte signed integer value.
            </summary>
        </member>
        <member name="M:Nikki.Support.Underground2.Class.DBModelPart.ToString">
            <summary>
            Returns CollectionName, BinKey and <see cref="T:Nikki.Support.Shared.Parts.CarParts.RealCarPart"/> count as a string value.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:Nikki.Support.Underground2.Framework.CarPartManager.Disassemble(System.IO.BinaryReader,System.Int32,Nikki.Database.Underground2)">
            <summary>
            Disassembles entire car parts block using <see cref="T:System.IO.BinaryReader"/> provided 
            into <see cref="T:Nikki.Support.Underground2.Class.DBModelPart"/> collections and stores them in 
            <see cref="T:Nikki.Database.Underground2"/> passed.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read data with.</param>
            <param name="size">Size of the car parts block.</param>
            <param name="db"><see cref="T:Nikki.Database.Underground2"/> where all collections 
            should be stored.</param>
        </member>
        <member name="M:Nikki.Support.Underground2.Framework.CarPartManager.Assemble(System.IO.BinaryWriter,Nikki.Database.Underground2)">
            <summary>
            Assembles entire root of <see cref="T:Nikki.Support.Underground2.Class.DBModelPart"/> into a byte array and 
            writes it with <see cref="T:System.IO.BinaryWriter"/> provided.
            </summary>
            <param name="bw"><see cref="T:System.IO.BinaryWriter"/> to write data with.</param>
            <param name="db"><see cref="T:Nikki.Database.Underground2"/> database with roots 
            and collections.</param>
        </member>
        <member name="T:Nikki.Support.Underground2.Parts.CarParts.CPStruct">
            <summary>
            A unit <see cref="T:Nikki.Support.Underground2.Parts.CarParts.RealCarPart"/> struct with geometry part names.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.CPStruct.Exists">
            <summary>
            Indicates whether this struct should exist in the database or not.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.CPStruct.Templated">
            <summary>
            If true, all strings are built using string block; otherwise they are stored as keys.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.CPStruct.Concatenator">
            <summary>
            String that is used to be concatenated in front of geometry names.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.CPStruct.GeometryName1">
            <summary>
            Geometry name 1 of this <see cref="T:Nikki.Support.Underground2.Parts.CarParts.CPStruct"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.CPStruct.GeometryName2">
            <summary>
            Geometry name 2 of this <see cref="T:Nikki.Support.Underground2.Parts.CarParts.CPStruct"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.CPStruct.GeometryName3">
            <summary>
            Geometry name 3 of this <see cref="T:Nikki.Support.Underground2.Parts.CarParts.CPStruct"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.CPStruct.GeometryName4">
            <summary>
            Geometry name 4 of this <see cref="T:Nikki.Support.Underground2.Parts.CarParts.CPStruct"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.CPStruct.GeometryName5">
            <summary>
            Geometry name 5 of this <see cref="T:Nikki.Support.Underground2.Parts.CarParts.CPStruct"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.CPStruct.GeometryName6">
            <summary>
            Geometry name 6 of this <see cref="T:Nikki.Support.Underground2.Parts.CarParts.CPStruct"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.CPStruct.GeometryName7">
            <summary>
            Geometry name 7 of this <see cref="T:Nikki.Support.Underground2.Parts.CarParts.CPStruct"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.CPStruct.GeometryName8">
            <summary>
            Geometry name 8 of this <see cref="T:Nikki.Support.Underground2.Parts.CarParts.CPStruct"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.CPStruct.ConcatenatorExists">
            <summary>
            True if concatenator string exists; false otherwise.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.CPStruct.Geometry1Exists">
            <summary>
            True if geometry 1 exists; false othewise.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.CPStruct.Geometry2Exists">
            <summary>
            True if geometry 2 exists; false othewise.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.CPStruct.Geometry3Exists">
            <summary>
            True if geometry 3 exists; false othewise.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.CPStruct.Geometry4Exists">
            <summary>
            True if geometry 4 exists; false othewise.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.CPStruct.Geometry5Exists">
            <summary>
            True if geometry 5 exists; false othewise.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.CPStruct.Geometry6Exists">
            <summary>
            True if geometry 6 exists; false othewise.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.CPStruct.Geometry7Exists">
            <summary>
            True if geometry 7 exists; false othewise.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.CPStruct.Geometry8Exists">
            <summary>
            True if geometry 8 exists; false othewise.
            </summary>
        </member>
        <member name="M:Nikki.Support.Underground2.Parts.CarParts.CPStruct.#ctor">
            <summary>
            Initialized new instance of <see cref="T:Nikki.Support.Underground2.Parts.CarParts.CPStruct"/>.
            </summary>
        </member>
        <member name="M:Nikki.Support.Underground2.Parts.CarParts.CPStruct.#ctor(System.IO.BinaryReader,System.IO.BinaryReader)">
            <summary>
            Initializes new instance of <see cref="T:Nikki.Support.Underground2.Parts.CarParts.CPStruct"/>.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read with.</param>
            <param name="str_reader"><see cref="T:System.IO.BinaryReader"/> to read strings with.</param>
        </member>
        <member name="M:Nikki.Support.Underground2.Parts.CarParts.CPStruct.Disassemble(System.IO.BinaryReader,System.IO.BinaryReader)">
            <summary>
            Disassembles byte array into <see cref="T:Nikki.Support.Underground2.Parts.CarParts.CPStruct"/> using <see cref="T:System.IO.BinaryReader"/> 
            provided.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read with.</param>
            <param name="str_reader"><see cref="T:System.IO.BinaryReader"/> to read strings with.</param>
        </member>
        <member name="M:Nikki.Support.Underground2.Parts.CarParts.CPStruct.Assemble(System.IO.BinaryWriter,System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Assembles <see cref="T:Nikki.Support.Underground2.Parts.CarParts.CPStruct"/> and writes it using <see cref="T:System.IO.BinaryWriter"/> 
            provided.
            </summary>
            <param name="bw"><see cref="T:System.IO.BinaryWriter"/> to write with.</param>
            <param name="string_dict">Dictionary with string HashCodes and their offsets.</param>
        </member>
        <member name="M:Nikki.Support.Underground2.Parts.CarParts.CPStruct.ToString">
            <summary>
            Returns templated value and first geometry name as a string value.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:Nikki.Support.Underground2.Parts.CarParts.CPStruct.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object, which must also be a
            <see cref="T:Nikki.Support.Underground2.Parts.CarParts.CPStruct"/> object, have the same value.
            </summary>
            <param name="obj">The <see cref="T:Nikki.Support.Underground2.Parts.CarParts.CPStruct"/> to compare to this instance.</param>
            <returns>True if obj is a <see cref="T:Nikki.Support.Underground2.Parts.CarParts.CPStruct"/> and its value is the same as 
            this instance; false otherwise. If obj is null, the method returns false.
            </returns>
        </member>
        <member name="M:Nikki.Support.Underground2.Parts.CarParts.CPStruct.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Nikki.Support.Underground2.Parts.CarParts.CPStruct"/>.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Nikki.Support.Underground2.Parts.CarParts.CPStruct.op_Equality(Nikki.Support.Underground2.Parts.CarParts.CPStruct,Nikki.Support.Underground2.Parts.CarParts.CPStruct)">
            <summary>
            Determines whether two specified <see cref="T:Nikki.Support.Underground2.Parts.CarParts.CPStruct"/> have the same value.
            </summary>
            <param name="cp1">The first <see cref="T:Nikki.Support.Underground2.Parts.CarParts.CPStruct"/> to compare, or null.</param>
            <param name="cp2">The second <see cref="T:Nikki.Support.Underground2.Parts.CarParts.CPStruct"/> to compare, or null.</param>
            <returns>True if the value of c1 is the same as the value of c2; false otherwise.</returns>
        </member>
        <member name="M:Nikki.Support.Underground2.Parts.CarParts.CPStruct.op_Inequality(Nikki.Support.Underground2.Parts.CarParts.CPStruct,Nikki.Support.Underground2.Parts.CarParts.CPStruct)">
            <summary>
            Determines whether two specified <see cref="T:Nikki.Support.Underground2.Parts.CarParts.CPStruct"/> have different values.
            </summary>
            <param name="cp1">The first <see cref="T:Nikki.Support.Underground2.Parts.CarParts.CPStruct"/> to compare, or null.</param>
            <param name="cp2">The second <see cref="T:Nikki.Support.Underground2.Parts.CarParts.CPStruct"/> to compare, or null.</param>
            <returns>True if the value of c1 is different from the value of c2; false otherwise.</returns>
        </member>
        <member name="T:Nikki.Support.Underground2.Parts.CarParts.RealCarPart">
            <summary>
            A unit CarPart attribute of <see cref="T:Nikki.Support.Underground2.Class.DBModelPart"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.RealCarPart.PartName">
            <summary>
            Name of this <see cref="T:Nikki.Support.Underground2.Parts.CarParts.RealCarPart"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.RealCarPart.Index">
            <summary>
            Index of <see cref="T:Nikki.Support.Underground2.Class.DBModelPart"/> to which this part belongs to.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.RealCarPart.Attributes">
            <summary>
            Collection of <see cref="T:Nikki.Support.Shared.Parts.CarParts.CPAttribute"/> of this <see cref="T:Nikki.Support.Underground2.Parts.CarParts.RealCarPart"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.RealCarPart.Struct">
            <summary>
            A <see cref="T:Nikki.Support.Underground2.Parts.CarParts.CPStruct"/> of this <see cref="T:Nikki.Support.Underground2.Parts.CarParts.RealCarPart"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.RealCarPart.Model">
            <summary>
            <see cref="T:Nikki.Support.Underground2.Class.DBModelPart"/> to which this part belongs to.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.RealCarPart.CarPartGroupID">
            <summary>
            Car Part ID Group to which this part belongs to.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.RealCarPart.UpgradeGroupID">
            <summary>
            Upgrade group ID of this <see cref="T:Nikki.Support.Underground2.Parts.CarParts.RealCarPart"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.RealCarPart.DebugName">
            <summary>
            Debug name of this <see cref="T:Nikki.Support.Underground2.Parts.CarParts.RealCarPart"/>.
            </summary>
        </member>
        <member name="M:Nikki.Support.Underground2.Parts.CarParts.RealCarPart.#ctor">
            <summary>
            Initialize new instance of <see cref="T:Nikki.Support.Underground2.Parts.CarParts.RealCarPart"/>.
            </summary>
        </member>
        <member name="M:Nikki.Support.Underground2.Parts.CarParts.RealCarPart.#ctor(System.Int32,Nikki.Support.Underground2.Class.DBModelPart)">
            <summary>
            Initialize new instance of <see cref="T:Nikki.Support.Underground2.Parts.CarParts.RealCarPart"/>.
            </summary>
            <param name="index">Index of the <see cref="T:Nikki.Support.Underground2.Class.DBModelPart"/> in the database.</param>
            <param name="model"><see cref="T:Nikki.Support.Underground2.Class.DBModelPart"/> to which this part belongs to.</param>
        </member>
        <member name="M:Nikki.Support.Underground2.Parts.CarParts.RealCarPart.#ctor(System.Int32,System.Int32,Nikki.Support.Underground2.Class.DBModelPart)">
            <summary>
            Initialize new instance of <see cref="T:Nikki.Support.Underground2.Parts.CarParts.RealCarPart"/>.
            </summary>
            <param name="index">Index of the <see cref="T:Nikki.Support.Underground2.Class.DBModelPart"/> in the database.</param>
            <param name="capacity">Initial capacity of the attribute list.</param>
            <param name="model"><see cref="T:Nikki.Support.Underground2.Class.DBModelPart"/> to which this part belongs to.</param>
        </member>
        <member name="M:Nikki.Support.Underground2.Parts.CarParts.RealCarPart.ToString">
            <summary>
            Returns PartName, Attributes count and CarPartGroupID as a string value.
            </summary>
            <returns>String value.</returns>
        </member>
        <member name="M:Nikki.Support.Underground2.Parts.CarParts.RealCarPart.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Nikki.Support.Underground2.Parts.CarParts.RealCarPart"/>.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="T:Nikki.Support.Underground2.Parts.CarParts.TempPart">
            <summary>
            Represents temporary car part that is used to build <see cref="T:Nikki.Support.Underground2.Parts.CarParts.RealCarPart"/>.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.TempPart.PartNameHash">
            <summary>
            Hash of the part name.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.TempPart.CarPartGroupID">
            <summary>
            Group ID of the car.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.TempPart.UpgradeGroupID">
            <summary>
            Unknown yet value.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.TempPart.Index">
            <summary>
            Index of the model of the car.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.TempPart.DebugName">
            <summary>
            Debug name of the part.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.TempPart.AttribOffset">
            <summary>
            Attribute offset of the part.
            </summary>
        </member>
        <member name="P:Nikki.Support.Underground2.Parts.CarParts.TempPart.StructOffset">
            <summary>
            Struct offset of the part.
            </summary>
        </member>
        <member name="M:Nikki.Support.Underground2.Parts.CarParts.TempPart.Disassemble(System.IO.BinaryReader,System.IO.BinaryReader)">
            <summary>
            Disassembles array of bytes into <see cref="T:Nikki.Support.Underground2.Parts.CarParts.TempPart"/>.
            </summary>
            <param name="br"><see cref="T:System.IO.BinaryReader"/> to read with.</param>
            <param name="str_reader"><see cref="T:System.IO.BinaryReader"/> to read strings with.</param>
        </member>
        <member name="T:Nikki.Utils.DDS.DDS_CONST">
            <summary>
            DDS static class with methods to make <see cref="T:Nikki.Utils.DDS.DDS_PIXELFORMAT"/>.
            </summary>
        </member>
        <member name="T:Nikki.Utils.EA.Comp">
            <summary>
            Collection of functions for EA compressed texture files.
            </summary>
        </member>
        <member name="M:Nikki.Utils.EA.Comp.IsComp(System.UInt32)">
            <summary>
            Determines if an unsigned integer passed is an EA compression.
            </summary>
            <param name="value">Unsigned integer to be based on.</param>
            <returns>True if the value passed is an EA compression.</returns>
        </member>
        <member name="M:Nikki.Utils.EA.Comp.GetByte(System.UInt32)">
            <summary>
            Get EA compression byte from EA compression uint.
            </summary>
            <param name="value">Value from which get the result.</param>
            <returns>EA compression as a byte value.</returns>
        </member>
        <member name="M:Nikki.Utils.EA.Comp.GetByte(System.String)">
            <summary>
            Get EA compression byte from EA compression string.
            </summary>
            <param name="value">Value from which get the result.</param>
            <returns>EA compression as a byte value.</returns>
        </member>
        <member name="M:Nikki.Utils.EA.Comp.GetString(System.Byte)">
            <summary>
            Get EA compression string from EA compression byte.
            </summary>
            <param name="value">Value from which get the result.</param>
            <returns>EA compression as a string value.</returns>
        </member>
        <member name="M:Nikki.Utils.EA.Comp.GetString(System.UInt32)">
            <summary>
            Get EA compression string from EA compression uint.
            </summary>
            <param name="value">Value from which get the result.</param>
            <returns>EA compression as a string value.</returns>
        </member>
        <member name="M:Nikki.Utils.EA.Comp.GetInt(System.String)">
            <summary>
            Get EA compression uint from EA compression string.
            </summary>
            <param name="value">Value from which get the result.</param>
            <returns>EA compression as a uint value.</returns>
        </member>
        <member name="M:Nikki.Utils.EA.Comp.GetInt(System.Byte)">
            <summary>
            Get EA compression uint from EA compression byte.
            </summary>
            <param name="value">Value from which get the result.</param>
            <returns>EA compression as a uint value.</returns>
        </member>
        <member name="M:Nikki.Utils.EA.Comp.FlipToBase(System.Int32)">
            <summary>
            Calculates base of 2 image area based on the actual size passed.
            </summary>
            <param name="size">Size in pixels.</param>
            <returns>Base of 2 image size in pixels.</returns>
        </member>
        <member name="M:Nikki.Utils.EA.Comp.PitchLinearSize(System.Byte,System.Int16,System.Int16,System.UInt32)">
            <summary>
            Calculates .dds pitch or linear size.
            </summary>
            <param name="compression">.dds compression format as an EA compression byte.</param>
            <param name="width">Width of the image in pixels.</param>
            <param name="height">Height of the image in pixels.</param>
            <param name="bpp">Bytes per pixel in the image.</param>
            <returns>Pitch or linear size based on compression passed.</returns>
        </member>
        <member name="M:Nikki.Utils.EA.Comp.GetPixelFormat(Nikki.Utils.DDS.DDS_PIXELFORMAT,System.Byte)">
            <summary>
            Edits <see cref="T:Nikki.Utils.DDS.DDS_PIXELFORMAT"/> based on compression passed.
            </summary>
            <param name="PIXELFORMAT"><see cref="T:Nikki.Utils.DDS.DDS_PIXELFORMAT"/> of the .dds header passed as a reference type.</param>
            <param name="compression">EA compression byte of the image.</param>
        </member>
        <member name="M:Nikki.Utils.EA.Comp.IsDDSTexture(System.String)">
            <summary>
            Determines if the file is a .dds texture.
            </summary>
            <param name="filename">Filename to be evaluated.</param>
            <returns>True if the texture is a .dds texture.</returns>
        </member>
        <member name="M:Nikki.Utils.EA.Comp.IsDDSTexture(System.String,System.String@)">
            <summary>
            Determines if the file is a .dds texture.
            </summary>
            <param name="filename">Filename to be evaluated.</param>
            <param name="error">Specifies failure reason in case file is not a .dds texture.</param>
            <returns>True if the texture is a .dds texture.</returns>
        </member>
        <member name="M:Nikki.Utils.EA.Comp.GetTPKName(System.Int32,Nikki.Core.GameINT)">
            <summary>
            Gets the default .tpk name by index passed.
            </summary>
            <param name="index">Index of the .tpk in the array.</param>
            <param name="game"><see cref="T:Nikki.Core.GameINT"/> of the game.</param>
            <returns>Collection Name of the .tpk</returns>
        </member>
        <member name="T:Nikki.Utils.EA.SAT">
            <summary>
            Collection of FEng and .fng relevant resolving functions.
            </summary>
        </member>
        <member name="M:Nikki.Utils.EA.SAT.Decompress(System.Byte[])">
            <summary>
            Decompresses .fng JDLZ-compressed file.
            </summary>
            <param name="fng">.fng file as a byte array.</param>
            <returns>Decompressed FEng file as a byte array.</returns>
        </member>
        <member name="M:Nikki.Utils.EA.SAT.ColorToHex(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Converts ARGB representation to the hexadecimal one.
            </summary>
            <param name="alpha">Alpha value of the color.</param>
            <param name="red">Red value of the color.</param>
            <param name="green">Green value of the color.</param>
            <param name="blue">Blue value of the color.</param>
            <returns>String as a hexadecimal representation of the color.</returns>
        </member>
        <member name="M:Nikki.Utils.EA.SAT.GetAlpha(System.String)">
            <summary>
            Gets alpha parameter of a hexadecimal color passed.
            </summary>
            <param name="color">Hexadecimal color passed.</param>
            <returns>Alpha parameter as a byte.</returns>
        </member>
        <member name="M:Nikki.Utils.EA.SAT.GetRed(System.String)">
            <summary>
            Gets red parameter of a hexadecimal color passed.
            </summary>
            <param name="color">Hexadecimal color passed.</param>
            <returns>Red parameter as a byte.</returns>
        </member>
        <member name="M:Nikki.Utils.EA.SAT.GetGreen(System.String)">
            <summary>
            Gets green parameter of a hexadecimal color passed.
            </summary>
            <param name="color">Hexadecimal color passed.</param>
            <returns>Green parameter as a byte.</returns>
        </member>
        <member name="M:Nikki.Utils.EA.SAT.GetBlue(System.String)">
            <summary>
            Gets blue parameter of a hexadecimal color passed.
            </summary>
            <param name="color">Hexadecimal color passed.</param>
            <returns>Blue parameter as a byte.</returns>
        </member>
        <member name="T:Nikki.Utils.eLookupReturn">
            <summary>
            Type of return string in case of resolving key = 0.
            </summary>
        </member>
        <member name="F:Nikki.Utils.eLookupReturn.NULLREF">
            <summary>
            Returns <see langword="null"/>.
            </summary>
        </member>
        <member name="F:Nikki.Utils.eLookupReturn.EMPTY">
            <summary>
            Returns <see cref="F:System.String.Empty"/>.
            </summary>
        </member>
        <member name="F:Nikki.Utils.eLookupReturn.NULLARG">
            <summary>
            Returns <see cref="F:Nikki.Reflection.BaseArguments.NULL"/>.
            </summary>
        </member>
        <member name="T:Nikki.Utils.Hashing">
            <summary>
            Provides all major extensions of hashing strings.
            </summary>
        </member>
        <member name="M:Nikki.Utils.Hashing.BinHash(System.String)">
            <summary>
            Hashes string passed and returns its binary hash.
            </summary>
            <param name="value">String to be hashed.</param>
            <returns>Bin Memory Hash of the string as an unsigned integer.</returns>
        </member>
        <member name="M:Nikki.Utils.Hashing.VltHash(System.String)">
            <summary>
            Hashes string passed and returns its vault hash.
            </summary>
            <param name="value">String to be hashed.</param>
            <returns>Vlt Memory Hash of the string as an unsigned integer.</returns>
        </member>
        <member name="M:Nikki.Utils.Hashing.VltHash64(System.String)">
            <summary>
            Hashes string passed and returns its vault-64 hash.
            </summary>
            <param name="value">String to be hashed.</param>
            <returns>Vlt64 Memory Hash of the string as an unsigned long.</returns>
        </member>
        <member name="M:Nikki.Utils.Hashing.BinString(System.UInt32,Nikki.Utils.eLookupReturn)">
            <summary>
            Tries to resolve Bin key provided.
            </summary>
            <param name="key">Bin key to resolve.</param>
            <param name="type"><see cref="T:Nikki.Utils.eLookupReturn"/> type.</param>
            <returns>Resolved Bin Key.</returns>
        </member>
        <member name="M:Nikki.Utils.Hashing.VltString(System.UInt32,Nikki.Utils.eLookupReturn)">
            <summary>
            Tries to resolve Vlt key provided.
            </summary>
            <param name="key">Vlt key to resolve.</param>
            <param name="type"><see cref="T:Nikki.Utils.eLookupReturn"/> type.</param>
            <returns>Resolved Vlt Key.</returns>
        </member>
        <member name="T:Nikki.Utils.JDLZ">
            <summary>
            Collection with JDLZ compressor and decompressor.
            </summary>
        </member>
        <member name="M:Nikki.Utils.JDLZ.Decompress(System.Byte[])">
            <summary>
            Decompresses JDLZ byte array.
            </summary>
            <param name="block">Byte array to be decompressed.</param>
            <returns>Byte array of decompressed data.</returns>
        </member>
        <member name="M:Nikki.Utils.JDLZ.Compress(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compresses byte block into JDLZ-compressed one.
            </summary>
            <param name="input">Array of bytes to be compressed.</param>
            <param name="hashSize">Speed/Ratio tunable; use powers of 2. Results vary per file.</param>
            <param name="maxSearchDepth">Speed/Ratio tunable. Results vary per file.</param>
            <returns>JDLZ-compressed byte array.</returns>
        </member>
        <member name="T:Nikki.Utils.MemoryUnlock">
            <summary>
            Collection of methods of unlocking EA games' memory files.
            </summary>
        </member>
        <member name="M:Nikki.Utils.MemoryUnlock.FastUnlock(System.String)">
            <summary>
            Creates a 16-bytes unlocked memory file.
            </summary>
            <param name="filename">Filename to be created/replaced/overwritten.</param>
        </member>
        <member name="M:Nikki.Utils.MemoryUnlock.LongUnlock(System.String)">
            <summary>
            Creates a file of assembly generated info.
            </summary>
            <param name="filename">Filename to be created/replaced/overwritten.</param>
        </member>
        <member name="T:Nikki.Utils.Palette">
            <summary>
            Collection of P8 compression and decompression functions.
            </summary>
        </member>
        <member name="M:Nikki.Utils.Palette.P8toRGBA(System.Byte[],System.Int32)">
            <summary>
            Convert PAL8 .dds format into 32-bit RGBA
            </summary>
            <param name="data">binary data block to be converted</param>
            <param name="length">palette length in bytes</param>
            <returns>32-bit RGBA byte array converted based on PAL8 palette</returns>
        </member>
        <member name="M:Nikki.Utils.Palette.RGBAtoP8(System.Byte[])">
            <summary>
            Convert RGBA .dds format to 8-bit PAL8
            </summary>
            <param name="data">binary data of the .dds file including header</param>
            <returns>PAL8 formatted byte array with palette and compressed data</returns>
        </member>
    </members>
</doc>
